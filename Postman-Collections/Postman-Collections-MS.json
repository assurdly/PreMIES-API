{
	"info": {
		"_postman_id": "53fcd20a-96dc-4d37-b99f-13282d0f398e",
		"name": "Meter Supplier",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// Test that response status is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test tokenType exists and is 'Bearer'",
									"pm.test(\"Token type is Bearer\", () => {",
									"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
									"});",
									"",
									"// Test accessToken exists and is not empty",
									"pm.test(\"Access token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"accessToken\");",
									"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"// Test expiresIn exists and is greater than 0",
									"pm.test(\"expiresIn is valid\", () => {",
									"    pm.expect(responseData).to.have.property(\"expiresIn\");",
									"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
									"});",
									"",
									"// Test refreshToken exists and is not empty",
									"pm.test(\"Refresh token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"refreshToken\");",
									"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "59493cda-c91a-4cec-b37e-9ec701f666e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"mitams@yopmail.com\",\n    \"password\": \"Tester@123\"\n}\n\n// {\n//    \"username\": \"emediongetuk323@gmail.com\",\n//     \"password\": \"1234\"\n// }",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/authorize"
					},
					"response": [
						{
							"id": "a954c0a4-b78f-406a-9fc5-a5958b08fce4",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Invalid Authorize Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
								"exec": [
									"const responseData = pm.response.json();",
									"// Test that response status is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test tokenType exists and is 'Bearer'",
									"pm.test(\"Token type is Bearer\", () => {",
									"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
									"});",
									"",
									"// Test accessToken exists and is not empty",
									"pm.test(\"Access token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"accessToken\");",
									"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"// Test expiresIn exists and is greater than 0",
									"pm.test(\"expiresIn is valid\", () => {",
									"    pm.expect(responseData).to.have.property(\"expiresIn\");",
									"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
									"});",
									"",
									"// Test refreshToken exists and is not empty",
									"pm.test(\"Refresh token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"refreshToken\");",
									"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "647c4226-3cd1-4af9-bea1-ae4150557764",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"g\",\n    \"password\": \"Tester@123\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/authorize"
					},
					"response": [
						{
							"id": "15e3b0a5-40d5-4616-aff3-3f28b0b98427",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Invalid Authorize password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25a4daa0-a462-4be3-a302-5212c6db7fdf",
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// Test that response status is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test tokenType exists and is 'Bearer'",
									"pm.test(\"Token type is Bearer\", () => {",
									"    pm.expect(responseData).to.have.property(\"tokenType\", \"Bearer\");",
									"});",
									"",
									"// Test accessToken exists and is not empty",
									"pm.test(\"Access token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"accessToken\");",
									"    pm.expect(responseData.accessToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"// Test expiresIn exists and is greater than 0",
									"pm.test(\"expiresIn is valid\", () => {",
									"    pm.expect(responseData).to.have.property(\"expiresIn\");",
									"    pm.expect(responseData.expiresIn).to.be.a(\"number\").and.greaterThan(0);",
									"});",
									"",
									"// Test refreshToken exists and is not empty",
									"pm.test(\"Refresh token is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"refreshToken\");",
									"    pm.expect(responseData.refreshToken).to.be.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.collectionVariables.set(\"disrep-token\", responseData[\"accessToken\"]);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d56c2d40-b69e-4656-9624-7991b69608f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"T\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/authorize"
					},
					"response": [
						{
							"id": "c4c43143-cc57-4a46-8d04-692d83e9e037",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/authorize"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "814d94bb-710d-4ea0-94e6-5f7c599d7299",
			"description": "This endpoint return bearer token, which must be bind to the request for all others request"
		},
		{
			"name": "overview",
			"item": [
				{
					"name": "Contract quick view",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "mscontract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d66ecb0c-db87-4c43-b6e0-c1f5f5acf531",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"pm.test(\"Validate required keys in data and their types\", () => {",
													"    const expectedKeys = [",
													"        \"assigned_contract\",",
													"        \"complete_contract\",",
													"        \"active_contract\",",
													"        \"qunty_request\",",
													"        \"supply\",",
													"        \"meters\"",
													"    ];",
													"",
													"    expectedKeys.forEach(key => {",
													"        pm.expect(jsonData.data).to.have.property(key);",
													"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "54c9bda8-9a08-40cf-b64a-31e93439d3d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/overview/mscontract/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"overview",
												"mscontract",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "Mita",
													"type": "string"
												}
											]
										}
									},
									"response": [
										{
											"id": "af096aaf-1761-4287-b83c-e509aee01160",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/overview/mscontract/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"overview",
														"mscontract",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 35,\n  \"responsecode\": 4043,\n  \"data\": {\n    \"assigned_contract\": 9786,\n    \"complete_contract\": 9058,\n    \"active_contract\": 8363,\n    \"qunty_request\": 5240,\n    \"supply\": 5059,\n    \"meters\": 2878\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"stri\",\n  \"responsStatus\": true,\n  \"totalpage\": 5372,\n  \"currentpage\": 9922\n}"
										}
									]
								}
							],
							"id": "e0d27485-e744-4fac-bebe-5cc09c89c1b2",
							"description": "vendor id"
						}
					],
					"id": "e74567fd-6be9-4575-8a7b-303c73e54290"
				}
			],
			"id": "c448de2b-4177-459f-a88c-81278ba79b46"
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2970e671-729b-4274-a10e-453324738aee",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Validate response structure and values\", () => {",
									"",
									"    // Top-level checks",
									"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
									"    pm.expect(jsonData).to.have.property(\"responsecode\", 200);",
									"    pm.expect(jsonData).to.have.property(\"responsemessage\");",
									"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
									"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
									"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
									"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
									"",
									"    // Data object should exist",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"  ",
									"});",
									"",
									"pm.test(\"Validate response user dataTypes\", () => {",
									"    pm.expect(jsonData.data).to.have.property(\"fullname\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"username\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"roles\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data.canwrite).to.be.true;",
									"    pm.expect(jsonData.data.lockstatus).to.be.false;",
									"});",
									"",
									"pm.test(\"Validate inroles and roles\", () => {",
									"    pm.expect(jsonData.data.inroles).to.eql(\"MAF\");",
									"    pm.expect(jsonData.data.roles).to.eql(\"Admin\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "76c5f8cd-0846-4571-9df7-a441dd5782a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"mitams@yopmail.com\",\n    \"password\": \"Tester@123\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "b2540207-bc78-4a27-97a4-95791f350810",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				},
				{
					"name": "Invalid login pwd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
								"exec": [
									"pm.test(\"Validate response structure and values\", () => {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Common field checks",
									"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
									"    pm.expect(jsonData).to.have.property(\"data\", null);",
									"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
									"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
									"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
									"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
									"",
									"    // Conditional checks",
									"    if (jsonData.responsecode === 200) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
									"    } else if (jsonData.responsecode === 301) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
									"    } else {",
									"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
									"    }",
									"",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "78cabb95-527c-4e61-abaf-29cb70947628",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@13\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "fe14a2f5-6b1a-40ad-9b41-d6ffdf6275c1",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				},
				{
					"name": "Invalid login username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
								"exec": [
									"pm.test(\"Validate response structure and values\", () => {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Common field checks",
									"    pm.expect(jsonData).to.have.property(\"cc\", 0);",
									"    pm.expect(jsonData).to.have.property(\"data\", null);",
									"    pm.expect(jsonData).to.have.property(\"patterns\", \"\");",
									"    pm.expect(jsonData).to.have.property(\"responsStatus\", false);",
									"    pm.expect(jsonData).to.have.property(\"totalpage\", 0);",
									"    pm.expect(jsonData).to.have.property(\"currentpage\", 0);",
									"",
									"    // Conditional checks",
									"    if (jsonData.responsecode === 200) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Invalid User\");",
									"    } else if (jsonData.responsecode === 301) {",
									"        pm.expect(jsonData.responsemessage).to.eql(\"Account Lockout\");",
									"    } else {",
									"        pm.expect.fail(`Unexpected responsecode: ${jsonData.responsecode}`);",
									"    }",
									"",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fab96a7f-d45f-4283-9c34-8956c9f0bd80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"gilm@yopmail.com\",\n    \"password\": \"Tester@123\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "ea7b30ac-a376-48b3-91d2-d285db209358",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				},
				{
					"name": "Empty login Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6319a33a-5ac7-461e-8aa9-19796e0c50ce",
								"exec": [
									"pm.test(\"Validation Error Response\", () => {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.status).to.eql(400);",
									"    pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");",
									"",
									"    if (jsonData.errors.password) {",
									"        pm.expect(jsonData.errors.password).to.include(\"The password field is required.\");",
									"    }",
									"    if (jsonData.errors.username) {",
									"        pm.expect(jsonData.errors.username).to.include(\"The username field is required.\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "00faa0bf-273a-4afe-973c-d42eb37c4a6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \" \",\n    \"password\": \" \"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authentication/userlogin"
					},
					"response": [
						{
							"id": "82c87542-42a8-4369-b33a-ff47facbb1a9",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"string\",\n  \"username\": \"string\",\n  \"passcode\": \"string\",\n  \"usertype\": \"string\",\n  \"devicetype\": \"string\",\n  \"ipaddress\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/authentication/userlogin"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 231,\n  \"responsecode\": 2907,\n  \"data\": {\n    \"auth_level\": \"string\",\n    \"fullname\": \"string\",\n    \"inroles\": \"string\",\n    \"mailgoup\": false,\n    \"pagerole\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"roles\": \"string\",\n    \"username\": \"string\",\n    \"id\": 7303,\n    \"disco\": \"string\",\n    \"canwrite\": false,\n    \"lockstatus\": true,\n    \"userpresnt\": false,\n    \"logtime\": \"1999-07-22T19:49:41.006Z\",\n    \"datejoint\": \"1997-05-11T12:39:26.054Z\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"codevalid\": \"1987-10-12T02:15:40.287Z\",\n    \"retry\": 92\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6312,\n  \"currentpage\": 5354\n}"
						}
					]
				}
			],
			"id": "dc77ce1b-17be-471f-8b50-d556d7480f6f",
			"description": "Use this endpoint for user login.\n\nThis endpoint return user object upon successful login"
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Contract quick view",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "msquickcontract",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4a4375a-f939-4cdd-8ce3-f9379b37ae8a",
												"exec": [
													"// Parse response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
													"",
													"// Validate responsecode",
													"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
													"",
													"// Validate responsStatus",
													"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
													"",
													"// Validate data is an object",
													"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
													"",
													"// Validate fields in data",
													"pm.test(\"Validate totalmeter is a number\", () => pm.expect(jsonData.data.totalmeter).to.be.a(\"number\"));",
													"pm.test(\"Validate meter is a number\", () => pm.expect(jsonData.data.meter).to.be.a(\"number\"));",
													"pm.test(\"Validate certified is a number\", () => pm.expect(jsonData.data.certified).to.be.a(\"number\"));",
													"pm.test(\"Validate pending is a number\", () => pm.expect(jsonData.data.prnding).to.be.a(\"number\"));",
													"",
													"// Validate pagination fields",
													"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
													"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7c6d26d4-88fc-43e2-90f7-6ff692e8e608",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/operations/msquickcontract/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"operations",
												"msquickcontract",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "Mita",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "8b3f1de8-c4e0-4a99-a559-1a53f568814d",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/operations/msquickcontract/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"operations",
														"msquickcontract",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 3936,\n  \"responsecode\": 3646,\n  \"data\": {\n    \"totalmeter\": 2367,\n    \"meter\": 2951,\n    \"certified\": 2697,\n    \"prnding\": 4571\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 562,\n  \"currentpage\": 9674\n}"
										}
									]
								}
							],
							"id": "4c9941c0-0c1a-45b0-9f8d-4026afee3b4a",
							"description": "Vendor ID"
						}
					],
					"id": "10c80a57-e3e4-4fe1-82f6-7d54afd220b4"
				},
				{
					"name": "get notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14673d56-ca1a-4d90-a6f7-e79cf4f60234",
								"exec": [
									"// Parse response",
									"const jsonData = pm.response.json();",
									"",
									"// Test status code is 200",
									"pm.test(\"Response code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Test data object exists",
									"pm.test(\"Data object exists\", () => {",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"});",
									"",
									"// Test counters exist and are numbers",
									"[\"total\", \"read\", \"unread\", \"archived\"].forEach(key => {",
									"    pm.test(`${key} exists and is a number`, () => {",
									"        pm.expect(jsonData.data).to.have.property(key);",
									"        pm.expect(jsonData.data[key]).to.be.a(\"number\");",
									"    });",
									"});",
									"",
									"// Test all counters are >= 0",
									"pm.test(\"Counters are non-negative\", () => {",
									"    pm.expect(jsonData.data.total).to.be.at.least(0);",
									"    pm.expect(jsonData.data.read).to.be.at.least(0);",
									"    pm.expect(jsonData.data.unread).to.be.at.least(0);",
									"    pm.expect(jsonData.data.archived).to.be.at.least(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a998d1dc-66f4-4d50-a8a7-d092a363a3a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "origin",
								"value": "https://primes.omniswift.com"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://primes.omniswift.com/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "cross-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
							}
						],
						"url": "{{baseUrl}}/api/operations/notifications/DISREP"
					},
					"response": []
				}
			],
			"id": "3349d92b-0b5b-4a48-b99b-caae08fba63b"
		},
		{
			"name": "Contract Management",
			"item": [
				{
					"name": "Get Meter Supplier List",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "meter suppliers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dd0e1d6c-0999-4ce6-a1d9-597a944236f8",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API responsecode",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate top-level response fields",
															"pm.test(\"Validate top-level response fields\", () => {",
															"    pm.expect(jsonData).to.have.property(\"responsStatus\", true);",
															"    pm.expect(jsonData).to.have.property(\"totalpage\");",
															"    pm.expect(jsonData).to.have.property(\"currentpage\");",
															"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
															"});",
															"",
															"// Validate required keys exist in each data object and their types",
															"pm.test(\"Validate keys in each supplier object\", () => {",
															"    const requiredKeys = [",
															"        \"id\", \"m_supplier\", \"m_brand\", \"company\", \"m_country\", \"emailaddress\",",
															"        \"pri_contact\", \"contact_email\", \"company_phone\", \"roles\", \"vendor_id\",",
															"        \"mailgoup\", \"phone_number\", \"country\", \"state\", \"address\", \"zipcode\",",
															"        \"firstname\", \"lastname\", \"mcount\", \"concount\", \"accountstatus\",",
															"        \"datejoin\", \"lastlogin\", \"contract\"",
															"    ];",
															"",
															"    jsonData.data.forEach((item, index) => {",
															"        requiredKeys.forEach(key => {",
															"            pm.expect(item).to.have.property(key);",
															"        });",
															"",
															"        // Optional: check types for some important fields",
															"        pm.expect(item.id).to.be.a(\"number\");",
															"        pm.expect(item.m_supplier).to.be.a(\"string\");",
															"        pm.expect(item.m_brand).to.be.a(\"string\");",
															"        pm.expect(item.mailgoup).to.be.a(\"boolean\");",
															"        pm.expect(item.accountstatus).to.be.a(\"boolean\");",
															"        pm.expect(item.mcount).to.be.a(\"number\");",
															"        pm.expect(item.concount).to.be.a(\"number\");",
															"        pm.expect(item.contract).to.be.a(\"number\");",
															"        pm.expect(item.datejoin).to.be.a(\"string\");",
															"        pm.expect(item.lastlogin).to.be.a(\"string\");",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "016d7d49-6fdd-448d-b47b-8867b8fab0c7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"metersupplier",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "6d0fdd35-6edc-4a48-8d1f-dc703d96105c",
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"id": "59e3de8c-0161-468d-af9a-82d2dc0af9cd",
															"key": "limit",
															"value": "100",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "9911b69b-407b-4e3a-b0c9-9dbd4b40e4e2",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metersupplier/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metersupplier",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
												}
											]
										}
									],
									"id": "51b68543-0fa5-4671-8b22-c64c5cd04728"
								}
							],
							"id": "83f40c31-383e-434b-a9b5-708474382c6e"
						}
					],
					"id": "9680ca31-7a60-49b7-b092-c9b202ac6c9f",
					"description": "This endpoint return Meter Supplier List"
				},
				{
					"name": "Asset Folder",
					"item": [
						{
							"name": "Disco List",
							"item": [
								{
									"name": "discolist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d74a81c3-cb31-4832-a018-e89709d1334d",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Expected list of DISCOs",
													"const expectedDiscos = [",
													"    \"Abuja Electricity Distribution Company\",",
													"    \"Benin Electricity Distribution Company\",",
													"    \"EKO Electricity Distribution Company\",",
													"    \"Enugu Electricity Distribution Company\",",
													"    \"Ikeja Electricity Distribution Company\",",
													"    \"Ibadan Electricity Distribution Company\",",
													"    \"Kaduna Electricity Distribution Company\",",
													"    \"Yola Electricity Distribution Company\",",
													"    \"Jos Electricity Distribution Company\",",
													"    \"Portharcourt Electricity Distribution Company\",",
													"    \"Kano Electricity Distribution Company\"",
													"];",
													"",
													"// Test that response is an array",
													"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(jsonData)).to.be.true);",
													"",
													"// Test that response has all expected DISCOs",
													"pm.test(\"Response contains all expected DISCOs\", () => {",
													"    expectedDiscos.forEach(disco => {",
													"        pm.expect(jsonData).to.include(disco);",
													"    });",
													"});",
													"",
													"// Test that the length matches",
													"pm.test(\"Response array length matches expected\", () => {",
													"    pm.expect(jsonData.length).to.eql(expectedDiscos.length);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d2bab534-5841-4f9c-acc3-1f997417eb31",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/api/proassest/discolist"
									},
									"response": [
										{
											"id": "86ffe8f3-d852-4209-9cad-6a3a6f146f26",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/api/proassest/discolist"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								}
							],
							"id": "974465d8-5eb6-4ce2-bae3-70676397141e"
						},
						{
							"name": "Get State",
							"item": [
								{
									"name": "get list of states",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "492cb014-b5cb-4d0d-9c44-ce182e4b2124",
												"exec": [
													"// Parse response",
													"let jsonData = pm.response.json();",
													"",
													"// Validate response is an array",
													"pm.test(\"Response is an array\", () => {",
													"    pm.expect(Array.isArray(jsonData)).to.be.true;",
													"});",
													"",
													"// Validate each state object structure",
													"jsonData.forEach((stateObj, index) => {",
													"    pm.test(`State object #${index + 1} has required properties`, () => {",
													"        pm.expect(stateObj).to.have.property(\"state\");",
													"        pm.expect(stateObj).to.have.property(\"lgas\");",
													"        pm.expect(stateObj).to.have.property(\"alias\");",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'state' is a non-empty string`, () => {",
													"        pm.expect(stateObj.state).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'lgas' is a non-empty array`, () => {",
													"        pm.expect(stateObj.lgas).to.be.an(\"array\");",
													"        pm.expect(stateObj.lgas.length).to.be.greaterThan(0);",
													"    });",
													"",
													"    pm.test(`State object #${index + 1} -> 'alias' is a non-empty string`, () => {",
													"        pm.expect(stateObj.alias).to.be.a(\"string\").and.not.empty;",
													"    });",
													"",
													"    pm.test(`LGAs of state #${index + 1} are valid strings`, () => {",
													"        stateObj.lgas.forEach(lga => {",
													"            pm.expect(lga).to.be.a(\"string\").and.not.empty;",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e4120e5c-f2b1-4f04-aecf-a21329ad4ea8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": "{{baseUrl}}/api/proassest/getstates"
									},
									"response": [
										{
											"id": "6136b5b0-079f-49cc-a055-9efb13a56721",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": "{{baseUrl}}/api/proassest/getstates"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  },\n  {\n    \"state\": \"string\",\n    \"lgas\": [\n      \"string\",\n      \"string\"\n    ],\n    \"alias\": \"string\"\n  }\n]"
										}
									]
								}
							],
							"id": "3fd1cea0-f920-4025-a5c6-532ab61054d0"
						}
					],
					"id": "b18a813e-3460-43e3-83c5-ffa2ab8485a0"
				}
			],
			"id": "37515854-6410-414d-9cf4-2d54fba8aa8c"
		},
		{
			"name": "Installation Management",
			"item": [
				{
					"name": "Get installation quick view",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "msinstallationquick",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1cd0292-1807-480d-953f-b776cd519a3e",
												"exec": [
													"// Parse response JSON",
													"let jsonData = pm.response.json();",
													"",
													"// Test: Response code is 200",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test: responsecode is 200",
													"pm.test(\"responsecode is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Test: data object contains expected keys with numbers",
													"pm.test(\"data object has expected numeric fields\", () => {",
													"    pm.expect(jsonData.data).to.be.an(\"object\");",
													"    pm.expect(jsonData.data).to.have.keys([",
													"        \"pending\",",
													"        \"totalactiveinstaller\",",
													"        \"completeinstallation\",",
													"        \"unresolved\",",
													"        \"totalbatch\"",
													"    ]);",
													"    pm.expect(jsonData.data.pending).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.totalactiveinstaller).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.completeinstallation).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.unresolved).to.be.a(\"number\");",
													"    pm.expect(jsonData.data.totalbatch).to.be.a(\"number\");",
													"});",
													"",
													"//",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1e628b8e-8afb-4cd6-9ead-8d0f225974bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/customers/msinstallationquick/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"customers",
												"msinstallationquick",
												":data"
											],
											"variable": [
												{
													"key": "data",
													"value": "Mita",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "8c2a5750-9465-4255-be61-3edac38bf97e",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/customers/msinstallationquick/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"customers",
														"msinstallationquick",
														":data"
													],
													"variable": [
														{
															"key": "data"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 7055,\n  \"responsecode\": 6159,\n  \"data\": {\n    \"pending\": 9082,\n    \"totalactiveinstaller\": 9013,\n    \"completeinstallation\": 6854,\n    \"unresolved\": 5489,\n    \"totalbatch\": 2812\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3217,\n  \"currentpage\": 3114\n}"
										}
									]
								}
							],
							"id": "18be4525-21a2-40b3-b389-a3ef03d9868d",
							"description": "vendor id"
						}
					],
					"id": "ee60f2fd-c1f8-45ba-8594-9834223e1483"
				},
				{
					"name": "Get Pending schedule batch",
					"item": [
						{
							"name": "{status}",
							"item": [
								{
									"name": "{vendor}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msbatchschedule - Pending",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "fdf3a5ab-689d-4401-aa65-3c6d3ea664ec",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate items in data",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach((item, index) => {",
																			"        pm.test(`Item ${index + 1} - installationbatch is a string`, () => {",
																			"            pm.expect(item.installationbatch).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - disco is a string`, () => {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - scheduledate is a string`, () => {",
																			"            pm.expect(item.scheduledate).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - customercount is a number`, () => {",
																			"            pm.expect(item.customercount).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - single phase is a number`, () => {",
																			"            pm.expect(item.single).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - three phase is a number`, () => {",
																			"            pm.expect(item.three).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - supervisor is a string`, () => {",
																			"            pm.expect(item.supervisor).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - status is 'Pending'`, () => {",
																			"            pm.expect(item.status).to.eql(\"Pending\");",
																			"        });",
																			"    });",
																			"",
																			"    // Save first installationbatch as a collection variable",
																			"    pm.collectionVariables.set(\"pending-installbatchid\", jsonData.data[0].installationbatch);",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "9eb5b054-d328-4a45-b41c-1419c9666c1e",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"msbatchschedule",
																		":status",
																		":vendor",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "status",
																			"value": "Pending",
																			"description": "(Required) "
																		},
																		{
																			"key": "vendor",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "b2f0d1d9-5940-4a79-b3ff-75b197def41e",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"msbatchschedule",
																				":status",
																				":vendor",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "status"
																				},
																				{
																					"key": "vendor"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7830,\n  \"responsecode\": 1437,\n  \"data\": [\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"1951-08-10T08:27:44.428Z\",\n      \"customercount\": 8639,\n      \"single\": 6803,\n      \"three\": 114,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    },\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"2002-07-13T18:49:15.075Z\",\n      \"customercount\": 8745,\n      \"single\": 6861,\n      \"three\": 5452,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 7498,\n  \"currentpage\": 7807\n}"
																}
															]
														}
													],
													"id": "1c693c9b-5767-4445-92d8-96ce9174dada"
												}
											],
											"id": "20a1f89b-8ba8-4132-8323-12d8de91f960"
										}
									],
									"id": "38352fca-c0b2-43ef-88f4-8f1b18fee3fe"
								}
							],
							"id": "ec0c789f-c563-4389-969c-d5cbe1543cff"
						}
					],
					"id": "d730538c-55cd-47ce-a1bd-bfb887e21015"
				},
				{
					"name": "Get Completed schedule batch",
					"item": [
						{
							"name": "{status}",
							"item": [
								{
									"name": "{vendor}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msbatchschedule - Pending",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "fdf3a5ab-689d-4401-aa65-3c6d3ea664ec",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate items in data",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach((item, index) => {",
																			"        pm.test(`Item ${index + 1} - installationbatch is a string`, () => {",
																			"            pm.expect(item.installationbatch).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - disco is a string`, () => {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - scheduledate is a string`, () => {",
																			"            pm.expect(item.scheduledate).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - customercount is a number`, () => {",
																			"            pm.expect(item.customercount).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - single phase is a number`, () => {",
																			"            pm.expect(item.single).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - three phase is a number`, () => {",
																			"            pm.expect(item.three).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - supervisor is a string`, () => {",
																			"            pm.expect(item.supervisor).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(`Item ${index + 1} - status is 'Pending'`, () => {",
																			"            pm.expect(item.status).to.eql(\"Pending\");",
																			"        });",
																			"    });",
																			"",
																			"    // Save first installationbatch as a collection variable",
																			"    pm.collectionVariables.set(\"pending-installbatchid\", jsonData.data[0].installationbatch);",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "75f2f8f4-b925-4538-bf3b-7de1de68a7e0",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"msbatchschedule",
																		":status",
																		":vendor",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "status",
																			"value": "Completed",
																			"description": "(Required) "
																		},
																		{
																			"key": "vendor",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "2b7fd901-6d22-4671-9218-fefd715894d9",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"msbatchschedule",
																				":status",
																				":vendor",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "status"
																				},
																				{
																					"key": "vendor"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7830,\n  \"responsecode\": 1437,\n  \"data\": [\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"1951-08-10T08:27:44.428Z\",\n      \"customercount\": 8639,\n      \"single\": 6803,\n      \"three\": 114,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    },\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"2002-07-13T18:49:15.075Z\",\n      \"customercount\": 8745,\n      \"single\": 6861,\n      \"three\": 5452,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 7498,\n  \"currentpage\": 7807\n}"
																}
															]
														}
													],
													"id": "baaf4df8-d8e9-4fb3-87bf-4cc825470a83"
												}
											],
											"id": "60765e3c-a6d8-4e60-9b60-b15e829c9b02"
										}
									],
									"id": "cc93e9b8-4b16-4585-b1a8-b8390a18bf1b"
								}
							],
							"id": "9c289c71-ebb0-4f89-89b5-d55b0ebdab0b"
						}
					],
					"id": "c9c996aa-40d9-4a37-b855-eb0f90fc1897"
				},
				{
					"name": "Get Pending schedule by batch ID",
					"item": [
						{
							"name": "{status}",
							"item": [
								{
									"name": "{vendor}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msbatchschedule - Pending",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "fdf3a5ab-689d-4401-aa65-3c6d3ea664ec",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Test: Response code is 200",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Test: responsecode is 200",
																			"pm.test(\"responsecode is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Test: data is an array",
																			"pm.test(\"data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Test: first item in data has expected fields with correct types",
																			"if (jsonData.data.length > 0) {",
																			"    let item = jsonData.data[0];",
																			"",
																			"    pm.test(\"installationbatch is a string\", () => {",
																			"        pm.expect(item.installationbatch).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"disco is a string\", () => {",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"scheduledate is a string\", () => {",
																			"        pm.expect(item.scheduledate).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"customercount is a number\", () => {",
																			"        pm.expect(item.customercount).to.be.a(\"number\");",
																			"    });",
																			"",
																			"    pm.test(\"single phase is a number\", () => {",
																			"        pm.expect(item.single).to.be.a(\"number\");",
																			"    });",
																			"",
																			"    pm.test(\"three phase is a number\", () => {",
																			"        pm.expect(item.three).to.be.a(\"number\");",
																			"    });",
																			"",
																			"    pm.test(\"supervisor is a string\", () => {",
																			"        pm.expect(item.supervisor).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"status is a Pending\", () => {",
																			"        pm.expect(item.status).to.eql(\"Pending\");",
																			"    });",
																			"}",
																			"",
																			"",
																			"// Test: responsStatus is true",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.be.true;",
																			"});",
																			"",
																			"",
																			"",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "5afba639-fa9e-4c06-b07e-5e30340a1354",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit?installationbatch={{pending-installbatchid}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"msbatchschedule",
																		":status",
																		":vendor",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "installationbatch",
																			"value": "{{pending-installbatchid}}"
																		}
																	],
																	"variable": [
																		{
																			"key": "status",
																			"value": "Pending",
																			"description": "(Required) "
																		},
																		{
																			"key": "vendor",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "1b848263-daca-4c07-9895-6d75816b4828",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"msbatchschedule",
																				":status",
																				":vendor",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "status"
																				},
																				{
																					"key": "vendor"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7830,\n  \"responsecode\": 1437,\n  \"data\": [\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"1951-08-10T08:27:44.428Z\",\n      \"customercount\": 8639,\n      \"single\": 6803,\n      \"three\": 114,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    },\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"2002-07-13T18:49:15.075Z\",\n      \"customercount\": 8745,\n      \"single\": 6861,\n      \"three\": 5452,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 7498,\n  \"currentpage\": 7807\n}"
																}
															]
														}
													],
													"id": "5bfc913e-35f8-41cb-9bee-7a85552b05c8"
												}
											],
											"id": "a58253f6-89f9-4f92-91d4-90f0c04547a8"
										}
									],
									"id": "a68f1b7c-53e8-4ea0-bdfa-eaccd607bdc0"
								}
							],
							"id": "b176df0a-3fff-4441-95e7-ed4ef60acc52"
						}
					],
					"id": "4997ae21-30f1-4aea-9155-01e755517112"
				},
				{
					"name": "Get Completed schedule by batch ID",
					"item": [
						{
							"name": "{status}",
							"item": [
								{
									"name": "{vendor}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msbatchschedule - Pending",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "fdf3a5ab-689d-4401-aa65-3c6d3ea664ec",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Test: Response code is 200",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Test: responsecode is 200",
																			"pm.test(\"responsecode is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Test: data is an array",
																			"pm.test(\"data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Test: first item in data has expected fields with correct types",
																			"if (jsonData.data.length > 0) {",
																			"    let item = jsonData.data[0];",
																			"",
																			"    pm.test(\"installationbatch is a string\", () => {",
																			"        pm.expect(item.installationbatch).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"disco is a string\", () => {",
																			"        pm.expect(item.disco).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"scheduledate is a string\", () => {",
																			"        pm.expect(item.scheduledate).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"customercount is a number\", () => {",
																			"        pm.expect(item.customercount).to.be.a(\"number\");",
																			"    });",
																			"",
																			"    pm.test(\"single phase is a number\", () => {",
																			"        pm.expect(item.single).to.be.a(\"number\");",
																			"    });",
																			"",
																			"    pm.test(\"three phase is a number\", () => {",
																			"        pm.expect(item.three).to.be.a(\"number\");",
																			"    });",
																			"",
																			"    pm.test(\"supervisor is a string\", () => {",
																			"        pm.expect(item.supervisor).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"status is a Pending\", () => {",
																			"        pm.expect(item.status).to.eql(\"Pending\");",
																			"    });",
																			"}",
																			"",
																			"",
																			"// Test: responsStatus is true",
																			"pm.test(\"responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.be.true;",
																			"});",
																			"",
																			"",
																			"",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "cf9971e1-eba1-4085-b8f9-5d1b276e2a24",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit?installationbatch={{pending-installbatchid}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"msbatchschedule",
																		":status",
																		":vendor",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "installationbatch",
																			"value": "{{pending-installbatchid}}"
																		}
																	],
																	"variable": [
																		{
																			"key": "status",
																			"value": "Completed",
																			"description": "(Required) "
																		},
																		{
																			"key": "vendor",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "b4300e29-e999-4be3-951d-9f5ae8590110",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/msbatchschedule/:status/:vendor/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"msbatchschedule",
																				":status",
																				":vendor",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "status"
																				},
																				{
																					"key": "vendor"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 7830,\n  \"responsecode\": 1437,\n  \"data\": [\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"1951-08-10T08:27:44.428Z\",\n      \"customercount\": 8639,\n      \"single\": 6803,\n      \"three\": 114,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    },\n    {\n      \"installationbatch\": \"string\",\n      \"disco\": \"string\",\n      \"scheduledate\": \"2002-07-13T18:49:15.075Z\",\n      \"customercount\": 8745,\n      \"single\": 6861,\n      \"three\": 5452,\n      \"supervisor\": \"string\",\n      \"status\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 7498,\n  \"currentpage\": 7807\n}"
																}
															]
														}
													],
													"id": "3ab01b90-394e-4ad0-bfc3-9fcc22a3c899"
												}
											],
											"id": "a12c23a0-28bd-49b1-bd98-c562beb49cab"
										}
									],
									"id": "41282ddf-fd03-4a2b-8f3a-8b88aa2f535d"
								}
							],
							"id": "d04fece8-8da9-4168-ba2f-1376e018b0dc"
						}
					],
					"id": "10a30fc8-19dc-4076-8903-a4bf85afaa77"
				},
				{
					"name": "Get Customer's Installation Schedule",
					"item": [
						{
							"name": "{batch}",
							"item": [
								{
									"name": "{vendor}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "installationschedulebatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9619d258-6c85-40fc-bdea-0fe3d1360216",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", function () {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", function () {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate first item in data if available",
																			"if (jsonData.data.length > 0) {",
																			"    let item = jsonData.data[0];",
																			"",
																			"    pm.test(\"Validate id is a number\", function () {",
																			"        pm.expect(item.id).to.be.a(\"number\");",
																			"    });",
																			"",
																			"    pm.test(\"Validate fullname is a string\", function () {",
																			"        pm.expect(item.fullname).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"Validate customerid is a string\", function () {",
																			"        pm.expect(item.customerid).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"Validate phone_number is a string\", function () {",
																			"        pm.expect(item.phone_number).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"Validate emaill_address is a string\", function () {",
																			"        pm.expect(item.emaill_address).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"Validate schedule_id is a string\", function () {",
																			"        pm.expect(item.schedule_id).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"Validate installation_status is a string\", function () {",
																			"        pm.expect(item.installation_status).to.be.a(\"string\");",
																			"    });",
																			"",
																			"    pm.test(\"Validate installationstatus is a boolean\", function () {",
																			"        pm.expect(item.installationstatus).to.be.a(\"boolean\");",
																			"    });",
																			"",
																			"    // Save schedule_id as a collection variable",
																			"    pm.collectionVariables.set(\"pending-installbatchid\", item.schedule_id);",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", function () {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "ee076778-e1bd-4028-9634-5e8476919673",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/customers/installationschedulebatch/:batch/:vendor/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"customers",
																		"installationschedulebatch",
																		":batch",
																		":vendor",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "batch",
																			"value": "{{pending-installbatchid}}",
																			"description": "(Required) "
																		},
																		{
																			"key": "vendor",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "68bf263a-8134-4810-86fa-19678fd66e7e",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/customers/installationschedulebatch/:batch/:vendor/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"customers",
																				"installationschedulebatch",
																				":batch",
																				":vendor",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "batch"
																				},
																				{
																					"key": "vendor"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
																}
															]
														}
													],
													"id": "adee6ef5-30e6-4d87-9a87-ff79a1c21779"
												}
											],
											"id": "a427b43c-98ec-4eed-8cc8-5e39e38338a4"
										}
									],
									"id": "a0e231fb-6f70-4f20-8f3f-db6465c54583",
									"description": "vendor id"
								}
							],
							"id": "4789f036-b807-485e-b30d-af1feac7a380",
							"description": "Installation batch"
						},
						{
							"name": "Get Meter Installer for a DISCO",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{disco}",
											"item": [
												{
													"name": "installermsdisco",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "caae9687-7559-4725-894c-28ea2715bd31",
																"exec": [
																	"// Parse response JSON",
																	"let jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Validate HTTP status code\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", function () {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", function () {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate data is empty",
																	"pm.test(\"Validate data is empty\", function () {",
																	"    pm.expect(jsonData.data.length).to.eql(0);",
																	"});",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", function () {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "dcfb6585-62e1-48dc-97e3-a4c0c4bfb73d",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/installers/installermsdisco/:data/:disco",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"installers",
																"installermsdisco",
																":data",
																":disco"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "Mita",
																	"description": "(Required) "
																},
																{
																	"key": "disco",
																	"value": "Abuja Electricity Distribution Company",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "980d34f4-6296-4fe8-abc4-55dffff5c1ce",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/installers/installermsdisco/:data/:disco",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"installers",
																		"installermsdisco",
																		":data",
																		":disco"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "disco"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 9487,\n  \"responsecode\": 9245,\n  \"data\": [\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 3983,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"s\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"stri\",\n      \"jobcount\": 7917,\n      \"jobdone\": 1297,\n      \"installer_status\": false,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"2004-04-07T08:28:54.214Z\"\n    },\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 1896,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"string\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"string\",\n      \"jobcount\": 6157,\n      \"jobdone\": 2930,\n      \"installer_status\": true,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"1960-12-26T14:22:27.618Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 9372,\n  \"currentpage\": 2417\n}"
														}
													]
												}
											],
											"id": "168690f9-f97d-4146-b4e7-bf7678cb300e",
											"description": "DSICO"
										}
									],
									"id": "1c7c5fcd-625d-4faf-95fc-0822c515bd3f",
									"description": "Vendor ID"
								}
							],
							"id": "bb39e3fe-cfab-48ae-9072-da0d7d28c8e1"
						}
					],
					"id": "7c9fbef8-8dbf-4d29-ad0c-9ee63a69ed21"
				},
				{
					"name": "Get User's Comment",
					"item": [
						{
							"name": "{data}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get comments",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0657aef7-ea3b-4196-ae2a-d615e41a7a80",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", () => {",
																	"    pm.expect(jsonData.responsStatus).to.eql(true);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate data is empty",
																	"pm.test(\"Validate data is empty\", () => {",
																	"    pm.expect(jsonData.data.length).to.eql(0);",
																	"});",
																	"",
																	"// Validate response message is empty",
																	"pm.test(\"Validate response message is empty\", () => {",
																	"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "a183aa59-5245-4dc5-85ac-ae261680c4f6",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"operations",
																"getcomments",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{pending-installbatchid}}",
																	"description": "(Required) "
																},
																{
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "a4f974bc-acee-4a41-b90a-0c27489e9bc5",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/operations/getcomments/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"operations",
																		"getcomments",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 6197,\n  \"responsecode\": 6995,\n  \"data\": [\n    {\n      \"id\": 9158,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"2005-02-07T20:46:29.356Z\"\n    },\n    {\n      \"id\": 4418,\n      \"contract_id\": \"string\",\n      \"comment\": \"string\",\n      \"commentby\": \"string\",\n      \"endate\": \"1959-05-04T17:56:38.496Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 499,\n  \"currentpage\": 5013\n}"
														}
													]
												}
											],
											"id": "723ba662-1bf9-4f24-b859-369663c9844f"
										}
									],
									"id": "bbb78441-3372-4538-8a5c-b65c3f3b5d9b"
								}
							],
							"id": "40b4f7c3-2ce8-4e43-92cb-91bf7f2d274f"
						}
					],
					"id": "26e79bbf-aac9-4e9b-8a80-bf20d12de2ae"
				}
			],
			"id": "e875250e-3a1e-4685-ba46-96cba62613f5"
		},
		{
			"name": "Inventory Management",
			"item": [
				{
					"name": "Dashboard",
					"item": [
						{
							"name": "Meter Inventory dashboard",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "msinventorycards",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1ad1ee6b-8fe8-4edb-a44d-5dc28b2ce3e7",
														"exec": [
															"// Parse response JSON",
															"let jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", function () {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate data is an object",
															"pm.test(\"Validate data is an object\", function () {",
															"    pm.expect(jsonData.data).to.be.an(\"object\");",
															"});",
															"",
															"// Validate numeric fields inside data",
															"pm.test(\"Validate certified is a number\", function () {",
															"    pm.expect(jsonData.data.certified).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate totalmeters is a number\", function () {",
															"    pm.expect(jsonData.data.totalmeters).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate batchtransfer is a number\", function () {",
															"    pm.expect(jsonData.data.batchtransfer).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate metertransfer is a number\", function () {",
															"    pm.expect(jsonData.data.metertransfer).to.be.a(\"number\");",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", function () {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "b96bd815-64e1-4f53-aff3-b4df2c6e4024",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/msinventorycards/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"msinventorycards",
														":data"
													],
													"variable": [
														{
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "46aa29f3-17af-4154-be6a-c415342ae142",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/msinventorycards/:data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"msinventorycards",
																":data"
															],
															"variable": [
																{
																	"key": "data"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 6588,\n  \"responsecode\": 8241,\n  \"data\": {\n    \"certified\": 9839,\n    \"totalmeters\": 4560,\n    \"batchtransfer\": 3562,\n    \"metertransfer\": 9268\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6036,\n  \"currentpage\": 8610\n}"
												}
											]
										}
									],
									"id": "3809223b-925c-4baf-848a-daee60bf9287",
									"description": "vendor id"
								}
							],
							"id": "e8e32c26-198e-46b7-b2a2-c9761a430600"
						},
						{
							"name": "Get MS activities",
							"item": [
								{
									"name": "New Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d0b7aee-c1c7-46ad-9a63-068536efc33b",
												"exec": [
													"// Parse response JSON",
													"let jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Validate HTTP status code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", function () {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate data is an array",
													"pm.test(\"Validate data is an array\", function () {",
													"    pm.expect(jsonData.data).to.be.an(\"array\");",
													"});",
													"",
													"// Validate each item in data",
													"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
													"    jsonData.data.forEach(function (item, index) {",
													"        pm.test(`Item ${index + 1} - id is a number`, function () {",
													"            pm.expect(item.id).to.be.a(\"number\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - customerid is a string`, function () {",
													"            pm.expect(item.customerid).to.be.a(\"string\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - activity is a string`, function () {",
													"            pm.expect(item.activity).to.be.a(\"string\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - party is a string`, function () {",
													"            pm.expect(item.party).to.be.a(\"string\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - actby is a string`, function () {",
													"            pm.expect(item.actby).to.be.a(\"string\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - staus is a boolean`, function () {",
													"            pm.expect(item.staus).to.be.a(\"boolean\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - readstatus is a boolean`, function () {",
													"            pm.expect(item.readstatus).to.be.a(\"boolean\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - endate is a string`, function () {",
													"            pm.expect(item.endate).to.be.a(\"string\");",
													"        });",
													"",
													"        pm.test(`Item ${index + 1} - dateread is either null or string`, function () {",
													"            pm.expect(",
													"                item.dateread === null || typeof item.dateread === \"string\"",
													"            ).to.be.true;",
													"        });",
													"    });",
													"}",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"Validate responsStatus\", function () {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "95e48563-47df-4a42-b7ec-8668ddf21eba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJ9l31bQb8V535YV-Vo9m_C5YN0vrBQKJkiZuHvwMoi90jUDDwmpFR6bKq5piWkw-j_nuSiP3r2H-JCW01karaX2LTitYFjZ4ws5rLau6eC3p5fJ5qgDYPwOmuXp_CWXJqeJKW6QBQZUkeIJ19-SoKVZEjv_e_ynWXN4bywqA8_ysmopkpvrz_KBIqVirNOHweleDfqdOVkxbslLMlVUGA5kjlPIdW2D0TydsL_xwqRerVudTcUsH_yzCUyO49YsLh_dDjMWvfYZDwjRk47m6OQZQbXrMy6UUwF6A4gxNTlX3Dwuwu4gyGHKdK0NSNxQ6_9qQfwYNFsJRvzNJEwg7918GFNVDe63-eF_NvJUDl55NHUiYb0qqWYZSpi8zsI4vBY3XE0O2nreiMoJshBI6lI8fWO2Jiq_56ZE03rRPH9i_8oXbBG0HgllMVcFdYpMACBl1gZ76xj02OEznyNSHsR087kwOYYpD5-L_vAJFMhBjzAC2HcgjaCkEJnWva6IJ047yFEwB7gpc-M5RqQQC6dE2G-A9Qy17qxaZ9AxVOvqA"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"url": "{{baseUrl}}/api/operations/getactivities/Mita/1/25"
									},
									"response": []
								}
							],
							"id": "c665c5b7-a83e-4da7-9a4d-2763ce8c9db5"
						}
					],
					"id": "f1812a9a-eceb-4ec2-b5d0-b61690b84e17"
				},
				{
					"name": "Uploaded Batches",
					"item": [
						{
							"name": "Get Inventory quick view",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "msinventorybatchview",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fc95a4eb-f645-44f7-91fd-db6f285146b9",
														"exec": [
															"// Parse response JSON",
															"let jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", function () {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate data is an object",
															"pm.test(\"Validate data is an object\", function () {",
															"    pm.expect(jsonData.data).to.be.an(\"object\");",
															"});",
															"",
															"// Validate numeric fields inside data",
															"pm.test(\"Validate totalmeter is a number\", function () {",
															"    pm.expect(jsonData.data.totalmeter).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate certifiedmeter is a number\", function () {",
															"    pm.expect(jsonData.data.certifiedmeter).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate pendingbatch is a number\", function () {",
															"    pm.expect(jsonData.data.pendingbatch).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate pendingmeter is a number\", function () {",
															"    pm.expect(jsonData.data.pendingmeter).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate declinedbatch is a number\", function () {",
															"    pm.expect(jsonData.data.declinedbatch).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate declinedmeter is a number\", function () {",
															"    pm.expect(jsonData.data.declinedmeter).to.be.a(\"number\");",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", function () {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "9523a3d8-df00-49b4-bfd8-d9898e802fe0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/msinventorybatchview/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"msinventorybatchview",
														":data"
													],
													"variable": [
														{
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "2a5ba94e-28dd-44f2-9f36-f1c1a2575a1b",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/msinventorybatchview/:data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"msinventorybatchview",
																":data"
															],
															"variable": [
																{
																	"key": "data"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 1889,\n  \"responsecode\": 9361,\n  \"data\": {\n    \"totalmeter\": 7277,\n    \"certifiedmeter\": 2548,\n    \"pendingbatch\": 4355,\n    \"pendingmeter\": 4652,\n    \"declinedbatch\": 3711,\n    \"declinedmeter\": 8051\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2451,\n  \"currentpage\": 9265\n}"
												}
											]
										}
									],
									"id": "b5c0b8ab-5cf9-43a6-9a18-d210b0030ca4",
									"description": "vendor id"
								}
							],
							"id": "a4b14b4e-527f-4a07-be6c-f7e43ca5d922"
						},
						{
							"name": "Get Meters group by batch",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "inventoryuploadbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5c36cc5-274e-42b4-811c-11d2d8c96187",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", function () {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", function () {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate each item in data array",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach(function(item, index) {",
																			"",
																			"        pm.test(\"Validate batchnumber is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.batchnumber).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate prop_scheme is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate qty is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.qty).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate totalcost is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.totalcost).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate meterbrand is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.meterbrand).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate single is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.single).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate three is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.three).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate disco is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate certstatus is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.certstatus).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate dateassigned is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.dateassigned).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate datecertified is null or string for item \" + (index+1), function () {",
																			"            pm.expect(item.datecertified === null || typeof item.datecertified === \"string\").to.be.true;",
																			"        });",
																			"",
																			"    });",
																			"",
																			"    // Save first pending batchnumber as a collection variable",
																			"    let firstPending = jsonData.data.find(d => d.certstatus === \"Pending\");",
																			"    if (firstPending) {",
																			"        pm.collectionVariables.set(\"pending-batchnumber\", firstPending.batchnumber);",
																			"    }",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", function () {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "95a136f6-b343-4ba3-8c97-f815abf61203",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"inventoryuploadbatch",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "dc01d555-e041-41e3-b0d2-667917c6a706",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"inventoryuploadbatch",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 5559,\n  \"responsecode\": 7247,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 3647,\n      \"totalcost\": 6757.920627108598,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"1947-06-08T23:22:23.910Z\",\n      \"datecertified\": \"1977-10-31T09:09:47.033Z\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 9207,\n      \"totalcost\": 8224.112167447862,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"2014-11-06T11:20:32.126Z\",\n      \"datecertified\": \"1984-08-21T04:35:03.035Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 466,\n  \"currentpage\": 4289\n}"
																}
															]
														}
													],
													"id": "7b33cdb5-83a4-4b6a-b37a-a1672dc18404"
												}
											],
											"id": "eb22fc14-b59c-4dde-b0de-6a811a44c538"
										}
									],
									"id": "d8bd2f54-4ef2-4036-b440-996cdedb276d",
									"description": "vendor id"
								}
							],
							"id": "34ca0e89-2c31-4cc0-8d66-515a4c672f27"
						},
						{
							"name": "Get Meters group by batch Status",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "inventoryuploadbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5c36cc5-274e-42b4-811c-11d2d8c96187",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", function () {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", function () {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate each item in data array",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach(function(item, index) {",
																			"",
																			"        pm.test(\"Validate batchnumber is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.batchnumber).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate prop_scheme is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate qty is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.qty).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate totalcost is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.totalcost).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate meterbrand is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.meterbrand).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate single is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.single).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate three is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.three).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate disco is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate certstatus is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.certstatus).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate dateassigned is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.dateassigned).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate datecertified is null or string for item \" + (index+1), function () {",
																			"            pm.expect(item.datecertified === null || typeof item.datecertified === \"string\").to.be.true;",
																			"        });",
																			"",
																			"    });",
																			"",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", function () {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "0e12f813-2ea7-4da1-93db-6f4808c56666",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit?certstatus=Pending",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"inventoryuploadbatch",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "certstatus",
																			"value": "Certified",
																			"type": "text",
																			"disabled": true
																		},
																		{
																			"key": "certstatus",
																			"value": "Pending",
																			"type": "text"
																		},
																		{
																			"key": "certstatus",
																			"value": "Declined",
																			"type": "text",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "24770065-568d-4367-8fa5-e94c5e9a95c7",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"inventoryuploadbatch",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 5559,\n  \"responsecode\": 7247,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 3647,\n      \"totalcost\": 6757.920627108598,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"1947-06-08T23:22:23.910Z\",\n      \"datecertified\": \"1977-10-31T09:09:47.033Z\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 9207,\n      \"totalcost\": 8224.112167447862,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"2014-11-06T11:20:32.126Z\",\n      \"datecertified\": \"1984-08-21T04:35:03.035Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 466,\n  \"currentpage\": 4289\n}"
																}
															]
														}
													],
													"id": "dc1cfc48-2681-4ebb-8b4c-ad450dd3c7f2"
												}
											],
											"id": "bc7e2275-3ca6-4f8e-b297-ccd51bb2078d"
										}
									],
									"id": "64264108-8d08-4ff1-b09d-71dd82df93c6",
									"description": "vendor id"
								}
							],
							"id": "a9d57962-4baf-4335-adec-4dd05e9635ec"
						},
						{
							"name": "Get Meters group by batch number",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "inventoryuploadbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5c36cc5-274e-42b4-811c-11d2d8c96187",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", function () {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", function () {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate each item in data array",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach(function(item, index) {",
																			"",
																			"        pm.test(\"Validate batchnumber is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.batchnumber).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate prop_scheme is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate qty is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.qty).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate totalcost is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.totalcost).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate meterbrand is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.meterbrand).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate single is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.single).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate three is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.three).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate disco is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate certstatus is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.certstatus).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate dateassigned is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.dateassigned).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate datecertified is null or string for item \" + (index+1), function () {",
																			"            pm.expect(item.datecertified === null || typeof item.datecertified === \"string\").to.be.true;",
																			"        });",
																			"",
																			"    });",
																			"",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", function () {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "cdfe9088-9dcb-4ed4-a760-8e751aa74d31",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit?batchnumber={{pending-batchnumber}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"inventoryuploadbatch",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "batchnumber",
																			"value": "{{pending-batchnumber}}",
																			"type": "text"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "7ddc8957-1724-452e-bfc8-489871bd88b4",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"inventoryuploadbatch",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 5559,\n  \"responsecode\": 7247,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 3647,\n      \"totalcost\": 6757.920627108598,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"1947-06-08T23:22:23.910Z\",\n      \"datecertified\": \"1977-10-31T09:09:47.033Z\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 9207,\n      \"totalcost\": 8224.112167447862,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"2014-11-06T11:20:32.126Z\",\n      \"datecertified\": \"1984-08-21T04:35:03.035Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 466,\n  \"currentpage\": 4289\n}"
																}
															]
														}
													],
													"id": "3d1acec1-f429-4181-bc15-c8bb6bb597ec"
												}
											],
											"id": "3b206737-5b9a-452f-bf13-381656dda9b1"
										}
									],
									"id": "2de7803c-70e1-477f-b8f5-ee6803ab1222",
									"description": "vendor id"
								}
							],
							"id": "886debf2-6b3e-4d2c-911c-4113ff7ac91c"
						}
					],
					"id": "cda6364c-3fa1-4568-91f3-730194f4bac9"
				},
				{
					"name": "Certified Batches",
					"item": [
						{
							"name": "Get Meters certified",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "certified",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6c8664a-79d4-406d-85d7-ceae73a8040a",
														"exec": [
															"// Parse response JSON",
															"let jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => {",
															"    pm.expect(jsonData.responsecode).to.eql(200);",
															"});",
															"",
															"// Validate data is an object",
															"pm.test(\"Validate data is an object\", () => {",
															"    pm.expect(jsonData.data).to.be.an(\"object\");",
															"});",
															"",
															"// Validate all fields in data object",
															"pm.test(\"Validate receivedbatch is a number\", () => {",
															"    pm.expect(jsonData.data.receivedbatch).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate pendingbatch is a number\", () => {",
															"    pm.expect(jsonData.data.pendingbatch).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate certifiedbatch is a number\", () => {",
															"    pm.expect(jsonData.data.certifiedbatch).to.be.a(\"number\");",
															"});",
															"",
															"pm.test(\"Validate rejectedbatch is a number\", () => {",
															"    pm.expect(jsonData.data.rejectedbatch).to.be.a(\"number\");",
															"});",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", () => {",
															"    pm.expect(jsonData.responsStatus).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "a89519de-011f-4888-b08d-0ae026ff5a46",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/certified/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"certified",
														":data"
													],
													"variable": [
														{
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "330e7b23-62ce-446d-9301-5cc5b8729ad0",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/certified/:data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"certified",
																":data"
															],
															"variable": [
																{
																	"key": "data"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 9011,\n  \"responsecode\": 9300,\n  \"data\": {\n    \"receivedbatch\": 9168,\n    \"pendingbatch\": 4696,\n    \"certifiedbatch\": 4820,\n    \"rejectedbatch\": 2597\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 9041,\n  \"currentpage\": 2573\n}"
												}
											]
										}
									],
									"id": "0e346652-2e52-4835-b41e-df20e809e253",
									"description": "vendor id"
								}
							],
							"id": "e1c80d60-f56f-45ba-a019-28a5f6f764a7"
						},
						{
							"name": "Get Certified Meters by batch Status",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "inventoryuploadbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5c36cc5-274e-42b4-811c-11d2d8c96187",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", function () {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", function () {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate each item in data array",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach(function(item, index) {",
																			"",
																			"        pm.test(\"Validate batchnumber is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.batchnumber).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate prop_scheme is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate qty is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.qty).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate totalcost is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.totalcost).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate meterbrand is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.meterbrand).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate single is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.single).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate three is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.three).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate disco is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate certstatus is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.certstatus).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate dateassigned is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.dateassigned).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate datecertified is null or string for item \" + (index+1), function () {",
																			"            pm.expect(item.datecertified === null || typeof item.datecertified === \"string\").to.be.true;",
																			"        });",
																			"",
																			"        // Save first pending batchnumber as a collection variable",
																			"        let firstCertified = jsonData.data.find(d => d.certstatus === \"Certified\");",
																			"        if (firstCertified) {",
																			"        pm.collectionVariables.set(\"certified-batchnumber\", firstCertified.batchnumber);",
																			"    }",
																			"",
																			"    });",
																			"",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", function () {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "9353954b-9b40-420a-a03e-02f5aeaa97c6",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit?certstatus=Certified",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"inventoryuploadbatch",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "certstatus",
																			"value": "Certified"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "294a26ee-85a9-49b1-9661-12740853a64f",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"inventoryuploadbatch",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 5559,\n  \"responsecode\": 7247,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 3647,\n      \"totalcost\": 6757.920627108598,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"1947-06-08T23:22:23.910Z\",\n      \"datecertified\": \"1977-10-31T09:09:47.033Z\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 9207,\n      \"totalcost\": 8224.112167447862,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"2014-11-06T11:20:32.126Z\",\n      \"datecertified\": \"1984-08-21T04:35:03.035Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 466,\n  \"currentpage\": 4289\n}"
																}
															]
														}
													],
													"id": "9123c844-c1eb-47fa-9501-0da5972b1729"
												}
											],
											"id": "7b456601-0230-4c9f-88ac-b148fbae0531"
										}
									],
									"id": "77e4dede-a88e-432f-bf2d-d0f9ee46e27e",
									"description": "vendor id"
								}
							],
							"id": "2d00329c-c9e1-4854-8bf1-1bdfc8be90a4"
						},
						{
							"name": "Get Certified Meters by batch number",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "inventoryuploadbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5c36cc5-274e-42b4-811c-11d2d8c96187",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", function () {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", function () {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate each item in data array",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach(function(item, index) {",
																			"",
																			"        pm.test(\"Validate batchnumber is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.batchnumber).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate prop_scheme is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate qty is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.qty).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate totalcost is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.totalcost).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate meterbrand is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.meterbrand).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate single is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.single).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate three is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.three).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate disco is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate certstatus is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.certstatus).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate dateassigned is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.dateassigned).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate datecertified is null or string for item \" + (index+1), function () {",
																			"            pm.expect(item.datecertified === null || typeof item.datecertified === \"string\").to.be.true;",
																			"        });",
																			"",
																			"    });",
																			"",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", function () {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "03529539-9070-4b58-a407-88ad33a44c3d",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit?batchnumber={{certified-batchnumber}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"inventoryuploadbatch",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "batchnumber",
																			"value": "{{certified-batchnumber}}"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "9e2b0efc-1026-41c5-b6b1-e1661b9040cd",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"inventoryuploadbatch",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 5559,\n  \"responsecode\": 7247,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 3647,\n      \"totalcost\": 6757.920627108598,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"1947-06-08T23:22:23.910Z\",\n      \"datecertified\": \"1977-10-31T09:09:47.033Z\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 9207,\n      \"totalcost\": 8224.112167447862,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"2014-11-06T11:20:32.126Z\",\n      \"datecertified\": \"1984-08-21T04:35:03.035Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 466,\n  \"currentpage\": 4289\n}"
																}
															]
														}
													],
													"id": "fda04c7b-1f7e-4129-8551-d96ba14e7aff"
												}
											],
											"id": "46444cd3-b8c8-48f0-8c5f-646b9cdbb8ad"
										}
									],
									"id": "ffc24575-a5ee-4a8e-9ef9-c0cdf44c32f3",
									"description": "vendor id"
								}
							],
							"id": "10483aa8-10cd-44b5-9235-5f549cb12a13"
						},
						{
							"name": "Get Certified Meters by Meter Brand",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "inventoryuploadbatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5c36cc5-274e-42b4-811c-11d2d8c96187",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", function () {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", function () {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate each item in data array",
																			"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																			"    jsonData.data.forEach(function(item, index) {",
																			"",
																			"        pm.test(\"Validate batchnumber is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.batchnumber).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate prop_scheme is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.prop_scheme).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate qty is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.qty).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate totalcost is a number for item \" + (index+1), function () {",
																			"            pm.expect(item.totalcost).to.be.a(\"number\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate meterbrand is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.meterbrand).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate single is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.single).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate three is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.three).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate disco is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.disco).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate certstatus is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.certstatus).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate dateassigned is a string for item \" + (index+1), function () {",
																			"            pm.expect(item.dateassigned).to.be.a(\"string\");",
																			"        });",
																			"",
																			"        pm.test(\"Validate datecertified is null or string for item \" + (index+1), function () {",
																			"            pm.expect(item.datecertified === null || typeof item.datecertified === \"string\").to.be.true;",
																			"        });",
																			"",
																			"        // Save first pending batchnumber as a collection variable",
																			"        let firstCertified = jsonData.data.find(d => d.certstatus === \"Certified\");",
																			"        if (firstCertified) {",
																			"        pm.collectionVariables.set(\"certified-batchnumber\", firstCertified.batchnumber);",
																			"    }",
																			"",
																			"    });",
																			"",
																			"}",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", function () {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "e18d2f86-455e-4dd8-9ed1-732d3e51482f",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit?certstatus=Certified&meterbrand=Mbah Power Limited",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"inventoryuploadbatch",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "certstatus",
																			"value": "Certified"
																		},
																		{
																			"key": "meterbrand",
																			"value": "Mojec Meter Company Limited",
																			"disabled": true
																		},
																		{
																			"key": "meterbrand",
																			"value": "Mbah Power Limited",
																			"type": "text"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "8106c47f-d29d-4cd4-923f-bc756f638fef",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/inventoryuploadbatch/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"inventoryuploadbatch",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 5559,\n  \"responsecode\": 7247,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 3647,\n      \"totalcost\": 6757.920627108598,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"1947-06-08T23:22:23.910Z\",\n      \"datecertified\": \"1977-10-31T09:09:47.033Z\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"qty\": 9207,\n      \"totalcost\": 8224.112167447862,\n      \"meterbrand\": \"string\",\n      \"single\": \"string\",\n      \"three\": \"string\",\n      \"disco\": \"string\",\n      \"certstatus\": \"string\",\n      \"dateassigned\": \"2014-11-06T11:20:32.126Z\",\n      \"datecertified\": \"1984-08-21T04:35:03.035Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 466,\n  \"currentpage\": 4289\n}"
																}
															]
														}
													],
													"id": "8601c6d5-c38a-4060-a703-ee7175a978a9"
												}
											],
											"id": "9e5b7d6f-3bda-43f3-9f3c-5e0f7307d942"
										}
									],
									"id": "ab5bb222-e5fc-49b6-8d7d-4eb7f69fa5ec",
									"description": "vendor id"
								}
							],
							"id": "2d617c19-d98a-4a91-a1e4-20b41fcf09c9"
						},
						{
							"name": "Get Meter by batch",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{vendorid}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "Metersupplier getmeterbatch",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "aff55ca9-c86b-49e8-8e0a-6cf1f1e49bfa",
																				"exec": [
																					"// Parse response JSON",
																					"let jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																					"",
																					"// Validate each item in data array",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    jsonData.data.forEach((item, index) => {",
																					"        pm.test(`Item ${index + 1} - id is a number`, () => pm.expect(item.id).to.be.a(\"number\"));",
																					"        pm.test(`Item ${index + 1} - meter_number is a string`, () => pm.expect(item.meter_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_brand is a string`, () => pm.expect(item.meter_brand).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - date_supplied is a string`, () => pm.expect(item.date_supplied).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_phase is a string`, () => pm.expect(item.meter_phase).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - batch_number is a string`, () => pm.expect(item.batch_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - disco is a string`, () => pm.expect(item.disco).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - prop_scheme is a string`, () => pm.expect(item.prop_scheme).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - certified is a boolean`, () => pm.expect(item.certified).to.be.a(\"boolean\"));",
																					"        pm.test(`Item ${index + 1} - status is a string`, () => pm.expect(item.status).to.be.a(\"string\"));",
																					"    });",
																					"",
																					"    // Save first batch_number as collection variable",
																					"    pm.collectionVariables.set(\"first-meter-number\", jsonData.data[0].meter_number);",
																					"}",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "678b3626-50fc-4cc3-9dd2-6b870f643eb9",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getmeterbatch",
																				":data",
																				":vendorid",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{certified-batchnumber}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "vendorid",
																					"value": "Mita",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "2f7ac8c9-8ec2-49c1-acf2-fe1f6bfa5b91",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"Metersupplier",
																						"getmeterbatch",
																						":data",
																						":vendorid",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "vendorid"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
																		}
																	]
																}
															],
															"id": "2051b89d-e57f-4884-ab63-f7b64284c4cf"
														}
													],
													"id": "ddde9991-76d9-46d0-8c60-ed7c1bc1af81"
												}
											],
											"id": "91ad36ad-6593-4152-8ac0-a1d578dbfaaa",
											"description": "vendor id"
										}
									],
									"id": "e22564ad-93bb-40b1-8e52-458be77a59b4",
									"description": "batch id"
								}
							],
							"id": "7c9e5b6c-a533-4517-a5e4-00002da7f402"
						},
						{
							"name": "Get Meter by batch with Meter ID",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{vendorid}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "Metersupplier getmeterbatch",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "aff55ca9-c86b-49e8-8e0a-6cf1f1e49bfa",
																				"exec": [
																					"// Parse response JSON",
																					"let jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																					"",
																					"// Validate each item in data array",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    jsonData.data.forEach((item, index) => {",
																					"        pm.test(`Item ${index + 1} - id is a number`, () => pm.expect(item.id).to.be.a(\"number\"));",
																					"        pm.test(`Item ${index + 1} - meter_number is a string`, () => pm.expect(item.meter_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_brand is a string`, () => pm.expect(item.meter_brand).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - date_supplied is a string`, () => pm.expect(item.date_supplied).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_phase is a string`, () => pm.expect(item.meter_phase).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - batch_number is a string`, () => pm.expect(item.batch_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - disco is a string`, () => pm.expect(item.disco).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - prop_scheme is a string`, () => pm.expect(item.prop_scheme).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - certified is a boolean`, () => pm.expect(item.certified).to.be.a(\"boolean\"));",
																					"        pm.test(`Item ${index + 1} - status is a string`, () => pm.expect(item.status).to.be.a(\"string\"));",
																					"    });",
																					"",
																					"}",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "1ae72bd5-f6cf-45bd-b83f-900a9a518417",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit?meter_number={{first-meter-number}}",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getmeterbatch",
																				":data",
																				":vendorid",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "meter_number",
																					"value": "{{first-meter-number}}"
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{certified-batchnumber}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "vendorid",
																					"value": "Mita",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "63cade74-085e-4e96-850c-f59a81f22f72",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"Metersupplier",
																						"getmeterbatch",
																						":data",
																						":vendorid",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "vendorid"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
																		}
																	]
																}
															],
															"id": "2b59c8c2-4e33-4dd7-84bd-d2af4423773b"
														}
													],
													"id": "9e45fff2-a34c-4499-a2a7-f550c4add58b"
												}
											],
											"id": "698ab3d5-4b29-47f2-9b48-09cff76f1a86",
											"description": "vendor id"
										}
									],
									"id": "2a3b196c-464a-4366-868a-439c2749b1ba",
									"description": "batch id"
								}
							],
							"id": "ffbb83d2-2852-4584-9b02-c7824b7cf4a9"
						}
					],
					"id": "a725699d-ed97-484c-8952-8af209defc96"
				},
				{
					"name": "Transfered Batches",
					"item": [
						{
							"name": "Get Transfered Meter Quick Overview",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "mstransquick",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "39b51da7-4eb9-432b-9a74-756dbf65c3e1",
														"exec": [
															"// Parse response JSON",
															"let jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
															"",
															"// Validate data is an object",
															"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
															"",
															"// Validate data fields and types",
															"if (jsonData.data) {",
															"    pm.test(\"Validate totaltransfermeter is a number\", () => pm.expect(jsonData.data.totaltransfermeter).to.be.a(\"number\"));",
															"    pm.test(\"Validate totaltransferbatch is a number\", () => pm.expect(jsonData.data.totaltransferbatch).to.be.a(\"number\"));",
															"    pm.test(\"Validate pendingtransfermeter is a number\", () => pm.expect(jsonData.data.pendingtransfermeter).to.be.a(\"number\"));",
															"    pm.test(\"Validate pendingtransferbatch is a number\", () => pm.expect(jsonData.data.pendingtransferbatch).to.be.a(\"number\"));",
															"    pm.test(\"Validate accepttransfermeter is a number\", () => pm.expect(jsonData.data.accepttransfermeter).to.be.a(\"number\"));",
															"    pm.test(\"Validate rejecttransferbatch is a number\", () => pm.expect(jsonData.data.rejecttransferbatch).to.be.a(\"number\"));",
															"    pm.test(\"Validate rejecttransfermeter is a number\", () => pm.expect(jsonData.data.rejecttransfermeter).to.be.a(\"number\"));",
															"    pm.test(\"Validate accepttransferbatch is a number\", () => pm.expect(jsonData.data.accepttransferbatch).to.be.a(\"number\"));",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "6550d9c3-4db4-4e0a-b0b2-3b17235ed078",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/mstransquick/:data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"mstransquick",
														":data"
													],
													"variable": [
														{
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "05390b1b-7473-492d-80b9-c39499bdf936",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/mstransquick/:data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"mstransquick",
																":data"
															],
															"variable": [
																{
																	"key": "data"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 3827,\n  \"responsecode\": 4759,\n  \"data\": {\n    \"totaltransfermeter\": 6513,\n    \"totaltransferbatch\": 1284,\n    \"pendingtransfermeter\": 4653,\n    \"pendingtransferbatch\": 8564,\n    \"accepttransfermeter\": 9116,\n    \"rejecttransferbatch\": 6792,\n    \"rejecttransfermeter\": 8909,\n    \"accepttransferbatch\": 5759\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 5207,\n  \"currentpage\": 4477\n}"
												}
											]
										}
									],
									"id": "39246118-c5ea-4250-b152-86767bae7481",
									"description": "Vendor ID"
								}
							],
							"id": "aca9dddc-15b3-4f68-984f-fbbe4de2cce7"
						},
						{
							"name": "Get Transfered Meter Batches",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msinventtrack",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "305a1e50-eb4c-4a80-a12c-67f9068d1e6a",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																			"",
																			"// Validate the ms status is transfered",
																			"pm.test(\"Validate ms status is transfered\", () => pm.expect(jsonData.data[0].ms_status).to.eql(\"Transfered\"));",
																			"",
																			"// Save transfered batch number",
																			"pm.collectionVariables.set(\"transfered-batchnumber\", jsonData.data[0].batchnumber);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "6273378d-3851-4f7c-8f47-49901b162a2d",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/msinventtrack/:data/:offset/:limit?ms_status=Transfered",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"msinventtrack",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "ms_status",
																			"value": "Transfered"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "cd12af08-63d4-4595-a019-6c3efb04f78d",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/msinventtrack/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"msinventtrack",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 9146,\n  \"responsecode\": 5066,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"reject_reason\": \"str\",\n      \"ms_status\": \"s\",\n      \"disco_status\": \"string\",\n      \"dateinitiate\": \"1951-01-24T07:11:10.657Z\",\n      \"qty\": 1197,\n      \"cost\": 853.5216124772837,\n      \"dateaccept\": \"1952-05-23T05:48:42.751Z\",\n      \"status\": \"string\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"reject_reason\": \"string\",\n      \"ms_status\": \"string\",\n      \"disco_status\": \"string\",\n      \"dateinitiate\": \"1965-04-18T11:40:56.776Z\",\n      \"qty\": 7368,\n      \"cost\": 3307.0390463662593,\n      \"dateaccept\": \"2015-07-04T09:22:59.510Z\",\n      \"status\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6014,\n  \"currentpage\": 724\n}"
																}
															]
														}
													],
													"id": "859887c3-5626-486f-94f5-c3c2825c30a5"
												}
											],
											"id": "9fa334c9-90cf-46ec-9eb2-963cfca3856e"
										}
									],
									"id": "4e0c52c6-021c-4d11-b580-835b133a78ef",
									"description": "vendor id"
								}
							],
							"id": "16231520-b17b-4346-9b4b-7be19fe2ed80"
						},
						{
							"name": "Get Transfered Meter Batches by Disco Status",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msinventtrack",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "305a1e50-eb4c-4a80-a12c-67f9068d1e6a",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "9ddf2f0d-93a3-4bec-b3c3-6d2c6b4c78f2",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/msinventtrack/:data/:offset/:limit?ms_status=Transfered&disco_status=Disco Accepted",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"msinventtrack",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "ms_status",
																			"value": "Transfered"
																		},
																		{
																			"key": "disco_status",
																			"value": "Disco Accepted",
																			"type": "text"
																		},
																		{
																			"key": "disco_status",
																			"value": "Not Accepted",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "c27f62fc-0558-4343-a925-304c08c71fde",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/msinventtrack/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"msinventtrack",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 9146,\n  \"responsecode\": 5066,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"reject_reason\": \"str\",\n      \"ms_status\": \"s\",\n      \"disco_status\": \"string\",\n      \"dateinitiate\": \"1951-01-24T07:11:10.657Z\",\n      \"qty\": 1197,\n      \"cost\": 853.5216124772837,\n      \"dateaccept\": \"1952-05-23T05:48:42.751Z\",\n      \"status\": \"string\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"reject_reason\": \"string\",\n      \"ms_status\": \"string\",\n      \"disco_status\": \"string\",\n      \"dateinitiate\": \"1965-04-18T11:40:56.776Z\",\n      \"qty\": 7368,\n      \"cost\": 3307.0390463662593,\n      \"dateaccept\": \"2015-07-04T09:22:59.510Z\",\n      \"status\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6014,\n  \"currentpage\": 724\n}"
																}
															]
														}
													],
													"id": "2b246a95-cb2d-4086-9653-1b636d2b1ab1"
												}
											],
											"id": "177bb41a-715c-45d5-9f29-272da541584d"
										}
									],
									"id": "690cb9b7-6a99-4d15-9a45-4381340b1464",
									"description": "vendor id"
								}
							],
							"id": "eb0b8cd5-74f8-40fa-8f0a-272a71c2c70e"
						},
						{
							"name": "Get Transfered Meter Batches by Batch ID",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msinventtrack",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "305a1e50-eb4c-4a80-a12c-67f9068d1e6a",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																			"",
																			"// Validate the ms status is transfered",
																			"pm.test(\"Validate ms status is transfered\", () => pm.expect(jsonData.data[0].ms_status).to.eql(\"Transfered\"));",
																			"",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "e5ef5ea6-427a-422f-a1b2-b892b9324189",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/msinventtrack/:data/:offset/:limit?ms_status=Transfered&batchnumber={{transfered-batchnumber}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"msinventtrack",
																		":data",
																		":offset",
																		":limit"
																	],
																	"query": [
																		{
																			"key": "ms_status",
																			"value": "Transfered"
																		},
																		{
																			"key": "batchnumber",
																			"value": "{{transfered-batchnumber}}"
																		}
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "ce194e03-72f9-4c7d-914b-372aaf051841",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/msinventtrack/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"msinventtrack",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 9146,\n  \"responsecode\": 5066,\n  \"data\": [\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"reject_reason\": \"str\",\n      \"ms_status\": \"s\",\n      \"disco_status\": \"string\",\n      \"dateinitiate\": \"1951-01-24T07:11:10.657Z\",\n      \"qty\": 1197,\n      \"cost\": 853.5216124772837,\n      \"dateaccept\": \"1952-05-23T05:48:42.751Z\",\n      \"status\": \"string\"\n    },\n    {\n      \"batchnumber\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"reject_reason\": \"string\",\n      \"ms_status\": \"string\",\n      \"disco_status\": \"string\",\n      \"dateinitiate\": \"1965-04-18T11:40:56.776Z\",\n      \"qty\": 7368,\n      \"cost\": 3307.0390463662593,\n      \"dateaccept\": \"2015-07-04T09:22:59.510Z\",\n      \"status\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6014,\n  \"currentpage\": 724\n}"
																}
															]
														}
													],
													"id": "95f8d238-8118-45ab-935b-5070552068a5"
												}
											],
											"id": "544309f5-b6c5-4c0a-bc25-41a060784f26"
										}
									],
									"id": "539aeb7d-244c-48ea-bbcc-325986e2f559",
									"description": "vendor id"
								}
							],
							"id": "8dd253a8-3f8a-435e-bfa8-230bffa7fec1"
						},
						{
							"name": "Get a Meter Batch details",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{datatype}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "msmeterbatch",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "1aa071cb-81f9-4a55-9cbe-f0db28a6c215",
																				"exec": [
																					"// Parse response JSON",
																					"let jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																					"",
																					"// Validate array items",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    jsonData.data.forEach((item, index) => {",
																					"        pm.test(`Item ${index + 1} - id is a number`, () => pm.expect(item.id).to.be.a(\"number\"));",
																					"        pm.test(`Item ${index + 1} - meter_number is a string`, () => pm.expect(item.meter_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_brand is a string`, () => pm.expect(item.meter_brand).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - date_supplied is a string`, () => pm.expect(item.date_supplied).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_phase is a string`, () => pm.expect(item.meter_phase).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - batch_number is a string`, () => pm.expect(item.batch_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - carton_number is a string`, () => pm.expect(item.carton_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - vendor_id is a string`, () => pm.expect(item.vendor_id).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - vendorname is a string`, () => pm.expect(item.vendorname).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - disco is a string`, () => pm.expect(item.disco).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - prop_scheme is a string`, () => pm.expect(item.prop_scheme).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - certified is boolean`, () => pm.expect(item.certified).to.be.a(\"boolean\"));",
																					"        pm.test(`Item ${index + 1} - metercost is a number`, () => pm.expect(item.metercost).to.be.a(\"number\"));",
																					"        pm.test(`Item ${index + 1} - status is a string`, () => pm.expect(item.status).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - mstransfer is boolean`, () => pm.expect(item.mstransfer).to.be.a(\"boolean\"));",
																					"        pm.test(`Item ${index + 1} - acceptdisco is boolean`, () => pm.expect(item.acceptdisco).to.be.a(\"boolean\"));",
																					"    });",
																					"}",
																					"",
																					"// Validate totalpage and currentpage",
																					"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
																					"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "68888479-4ccd-41a1-bbe4-4cf04a80e697",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/msmeterbatch/:data/:datatype/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"msmeterbatch",
																				":data",
																				":datatype",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{transfered-batchnumber}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "datatype",
																					"value": "Mita",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "69967a48-956c-4392-aa25-5b6c753cb85d",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/Metersupplier/msmeterbatch/:data/:datatype/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"Metersupplier",
																						"msmeterbatch",
																						":data",
																						":datatype",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "datatype"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
																		}
																	]
																}
															],
															"id": "d69de9f7-eaed-4d80-9c52-4cb6d05e6daf"
														}
													],
													"id": "25d390bf-d066-4d3f-bc10-294678fe3a4b"
												}
											],
											"id": "65a05b27-8ce8-43a5-aa9c-d1632d73b78d",
											"description": "PMI\n\nVendor ID"
										}
									],
									"id": "c1ff85c9-d4c7-40c9-a092-620ac37e2c89",
									"description": "batch id"
								}
							],
							"id": "7ba2b90f-53ff-4d36-9339-48d9b37de1d8"
						},
						{
							"name": "Meter Transfer Progress",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{vendorid}",
											"item": [
												{
													"name": "transferprogress",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1e6ebdea-5c09-4294-be6a-18154a87f829",
																"exec": [
																	"// Parse response JSON",
																	"let jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																	"",
																	"// Validate data is an object",
																	"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
																	"",
																	"// Validate data properties",
																	"if (jsonData.data) {",
																	"    pm.test(\"Validate transfer is boolean\", () => pm.expect(jsonData.data.transfer).to.be.a(\"boolean\"));",
																	"    pm.test(\"Validate disconfirm is boolean\", () => pm.expect(jsonData.data.disconfirm).to.be.a(\"boolean\"));",
																	"    pm.test(\"Validate reject is boolean\", () => pm.expect(jsonData.data.reject).to.be.a(\"boolean\"));",
																	"    pm.test(\"Validate delivered is boolean\", () => pm.expect(jsonData.data.delivered).to.be.a(\"boolean\"));",
																	"    pm.test(\"Validate reason is string\", () => pm.expect(jsonData.data.reason).to.be.a(\"string\"));",
																	"}",
																	"",
																	"// Validate totalpage and currentpage",
																	"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
																	"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "8a6ddba3-7316-44ea-9e97-ccfcc619b4e7",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/transferprogress/:data/:vendorid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"transferprogress",
																":data",
																":vendorid"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{transfered-batchnumber}}",
																	"description": "(Required) "
																},
																{
																	"key": "vendorid",
																	"value": "Mita",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "19d9a313-3cfa-4d0d-8d0c-75e5ef4094a0",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/transferprogress/:data/:vendorid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"transferprogress",
																		":data",
																		":vendorid"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "vendorid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 4509,\n  \"responsecode\": 5607,\n  \"data\": {\n    \"transfer\": true,\n    \"disconfirm\": true,\n    \"reject\": true,\n    \"delivered\": true,\n    \"reason\": \"string\"\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4878,\n  \"currentpage\": 4476\n}"
														}
													]
												}
											],
											"id": "80819998-d575-4d8d-b79d-6e21afcd197b"
										}
									],
									"id": "41ab34b1-6a75-45a3-8d35-027044f0e751",
									"description": "dsico"
								}
							],
							"id": "870591f4-067a-4d4f-a4e4-09983e862061"
						},
						{
							"name": "Get Transfered Meter by batch with Meter ID",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{vendorid}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "Metersupplier getmeterbatch",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "aff55ca9-c86b-49e8-8e0a-6cf1f1e49bfa",
																				"exec": [
																					"// Parse response JSON",
																					"let jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																					"",
																					"// Validate each item in data array",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    jsonData.data.forEach((item, index) => {",
																					"        pm.test(`Item ${index + 1} - id is a number`, () => pm.expect(item.id).to.be.a(\"number\"));",
																					"        pm.test(`Item ${index + 1} - meter_number is a string`, () => pm.expect(item.meter_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_brand is a string`, () => pm.expect(item.meter_brand).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - date_supplied is a string`, () => pm.expect(item.date_supplied).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_phase is a string`, () => pm.expect(item.meter_phase).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - batch_number is a string`, () => pm.expect(item.batch_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - disco is a string`, () => pm.expect(item.disco).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - prop_scheme is a string`, () => pm.expect(item.prop_scheme).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - certified is a boolean`, () => pm.expect(item.certified).to.be.a(\"boolean\"));",
																					"        pm.test(`Item ${index + 1} - status is a string`, () => pm.expect(item.status).to.be.a(\"string\"));",
																					"    });",
																					"",
																					"}",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "32b2ea79-1616-475e-a583-f79b2f0a8577",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getmeterbatch",
																				":data",
																				":vendorid",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "meter_number",
																					"value": "{{first-meter-number}}",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{transfered-batchnumber}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "vendorid",
																					"value": "Mita",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "79fe9a3c-0a6c-430b-af9f-036e4ff749b9",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"Metersupplier",
																						"getmeterbatch",
																						":data",
																						":vendorid",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "vendorid"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
																		}
																	]
																}
															],
															"id": "a7e1db84-54d8-4411-a6e9-4925de77c156"
														}
													],
													"id": "25a56e20-d454-4aa8-8c16-82aa66051a1f"
												}
											],
											"id": "c3fe89f4-a065-4bab-a052-f94d6f80bdc4",
											"description": "vendor id"
										}
									],
									"id": "df55977f-1fbe-4370-bf2b-f23f52703755",
									"description": "batch id"
								}
							],
							"id": "5b9e08c3-0dea-4806-8e80-9c25bf144ee1"
						},
						{
							"name": "Get Transfered Meter by batch with Meter ID & Meter Phase",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{vendorid}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "Metersupplier getmeterbatch",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "aff55ca9-c86b-49e8-8e0a-6cf1f1e49bfa",
																				"exec": [
																					"// Parse response JSON",
																					"let jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																					"",
																					"// Validate each item in data array",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    jsonData.data.forEach((item, index) => {",
																					"        pm.test(`Item ${index + 1} - id is a number`, () => pm.expect(item.id).to.be.a(\"number\"));",
																					"        pm.test(`Item ${index + 1} - meter_number is a string`, () => pm.expect(item.meter_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_brand is a string`, () => pm.expect(item.meter_brand).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - date_supplied is a string`, () => pm.expect(item.date_supplied).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_phase is a string`, () => pm.expect(item.meter_phase).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - batch_number is a string`, () => pm.expect(item.batch_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - disco is a string`, () => pm.expect(item.disco).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - prop_scheme is a string`, () => pm.expect(item.prop_scheme).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - certified is a boolean`, () => pm.expect(item.certified).to.be.a(\"boolean\"));",
																					"        pm.test(`Item ${index + 1} - status is a string`, () => pm.expect(item.status).to.be.a(\"string\"));",
																					"    });",
																					"",
																					"}",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "253f377d-c014-40a8-8dfb-28dfb36ad768",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit?meter_phase=Single Phase&meter_phase=Three Phase",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getmeterbatch",
																				":data",
																				":vendorid",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "meter_number",
																					"value": "{{first-meter-number}}",
																					"type": "text",
																					"disabled": true
																				},
																				{
																					"key": "meter_phase",
																					"value": "Single Phase",
																					"type": "text"
																				},
																				{
																					"key": "meter_phase",
																					"value": "Three Phase",
																					"type": "text"
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{transfered-batchnumber}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "vendorid",
																					"value": "Mita",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "9536fdf0-185b-49cd-9a1b-a228a5254ec1",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"Metersupplier",
																						"getmeterbatch",
																						":data",
																						":vendorid",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "vendorid"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
																		}
																	]
																}
															],
															"id": "eacc2343-9eb4-4f4a-8a59-a64d968dac10"
														}
													],
													"id": "4cb9bae7-a868-4913-8e14-bee1c116767f"
												}
											],
											"id": "f5f7946f-ef08-4f58-b885-3c3d5b51e12f",
											"description": "vendor id"
										}
									],
									"id": "3b763533-0751-4b21-8297-ee7cf12616c2",
									"description": "batch id"
								}
							],
							"id": "1668e2bc-3e8d-42e5-818e-83f463371d32"
						},
						{
							"name": "Get Transfered Meter by batch with Meter ID & Status",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{vendorid}",
											"item": [
												{
													"name": "{offset}",
													"item": [
														{
															"name": "{limit}",
															"item": [
																{
																	"name": "Metersupplier getmeterbatch",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"id": "aff55ca9-c86b-49e8-8e0a-6cf1f1e49bfa",
																				"exec": [
																					"// Parse response JSON",
																					"let jsonData = pm.response.json();",
																					"",
																					"// Validate HTTP status code",
																					"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																					"",
																					"// Validate API response code",
																					"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																					"",
																					"// Validate data is an array",
																					"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																					"",
																					"// Validate each item in data array",
																					"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
																					"    jsonData.data.forEach((item, index) => {",
																					"        pm.test(`Item ${index + 1} - id is a number`, () => pm.expect(item.id).to.be.a(\"number\"));",
																					"        pm.test(`Item ${index + 1} - meter_number is a string`, () => pm.expect(item.meter_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_brand is a string`, () => pm.expect(item.meter_brand).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - date_supplied is a string`, () => pm.expect(item.date_supplied).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - meter_phase is a string`, () => pm.expect(item.meter_phase).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - batch_number is a string`, () => pm.expect(item.batch_number).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - disco is a string`, () => pm.expect(item.disco).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - prop_scheme is a string`, () => pm.expect(item.prop_scheme).to.be.a(\"string\"));",
																					"        pm.test(`Item ${index + 1} - certified is a boolean`, () => pm.expect(item.certified).to.be.a(\"boolean\"));",
																					"        pm.test(`Item ${index + 1} - status is a string`, () => pm.expect(item.status).to.be.a(\"string\"));",
																					"    });",
																					"",
																					"}",
																					"",
																					"// Validate responsStatus is true",
																					"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																					""
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"id": "cd14b3b2-dbbe-4695-b768-eeb96683c0d2",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit?status=Approved",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getmeterbatch",
																				":data",
																				":vendorid",
																				":offset",
																				":limit"
																			],
																			"query": [
																				{
																					"key": "meter_number",
																					"value": "{{first-meter-number}}",
																					"type": "text",
																					"disabled": true
																				},
																				{
																					"key": "status",
																					"value": "Approved",
																					"type": "text"
																				},
																				{
																					"key": "status",
																					"value": "Pending",
																					"type": "text",
																					"disabled": true
																				}
																			],
																			"variable": [
																				{
																					"key": "data",
																					"value": "{{transfered-batchnumber}}",
																					"description": "(Required) "
																				},
																				{
																					"key": "vendorid",
																					"value": "Mita",
																					"description": "(Required) "
																				},
																				{
																					"key": "offset",
																					"value": "1",
																					"description": "(Required) "
																				},
																				{
																					"key": "limit",
																					"value": "10",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"response": [
																		{
																			"id": "da364495-b95e-4000-b0bd-16b55ff2cee5",
																			"name": "OK",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "text/plain"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/Metersupplier/getmeterbatch/:data/:vendorid/:offset/:limit",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"Metersupplier",
																						"getmeterbatch",
																						":data",
																						":vendorid",
																						":offset",
																						":limit"
																					],
																					"variable": [
																						{
																							"key": "data"
																						},
																						{
																							"key": "vendorid"
																						},
																						{
																							"key": "offset"
																						},
																						{
																							"key": "limit"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"responseTime": null,
																			"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
																		}
																	]
																}
															],
															"id": "bd00e69a-6047-4b67-b533-8e5734cd7128"
														}
													],
													"id": "fdff5a31-d4f0-4879-9b62-c928cffea1cc"
												}
											],
											"id": "dfbf6738-3fa1-4289-b317-69d135fa5652",
											"description": "vendor id"
										}
									],
									"id": "e3cdb082-8707-4e30-9d28-38a5801ad338",
									"description": "batch id"
								}
							],
							"id": "e7d13ce9-5566-447d-8465-ccdd9ae7f23b"
						},
						{
							"name": "Get Meter batch Summary",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{vendorid}",
											"item": [
												{
													"name": "msbatchshow",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2a5e49bf-8692-46bb-96f4-c25df66435f3",
																"exec": [
																	"// Parse response JSON",
																	"let jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																	"",
																	"// Validate responsStatus is true",
																	"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																	"",
																	"// Validate data is an object",
																	"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
																	"",
																	"// Validate fields inside data",
																	"if (jsonData.data) {",
																	"    pm.test(\"Validate datesupply is a string\", () => pm.expect(jsonData.data.datesupply).to.be.a(\"string\"));",
																	"    pm.test(\"Validate qnty is a number\", () => pm.expect(jsonData.data.qnty).to.be.a(\"number\"));",
																	"    pm.test(\"Validate meters is a string\", () => pm.expect(jsonData.data.meters).to.be.a(\"string\"));",
																	"    pm.test(\"Validate meterbrand is a string\", () => pm.expect(jsonData.data.meterbrand).to.be.a(\"string\"));",
																	"    pm.test(\"Validate batch is a string\", () => pm.expect(jsonData.data.batch).to.be.a(\"string\"));",
																	"    pm.test(\"Validate disco is a string\", () => pm.expect(jsonData.data.disco).to.be.a(\"string\"));",
																	"    pm.test(\"Validate single is a number\", () => pm.expect(jsonData.data.single).to.be.a(\"number\"));",
																	"    pm.test(\"Validate three is a number\", () => pm.expect(jsonData.data.three).to.be.a(\"number\"));",
																	"    pm.test(\"Validate cost is a number\", () => pm.expect(jsonData.data.cost).to.be.a(\"number\"));",
																	"    pm.test(\"Validate dates is a string\", () => pm.expect(jsonData.data.dates).to.be.a(\"string\"));",
																	"}",
																	"",
																	"// Validate pagination",
																	"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
																	"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "6825d4fd-c4ba-4399-b0a7-8353114bec82",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/msbatchshow/:data/:vendorid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"msbatchshow",
																":data",
																":vendorid"
															],
															"variable": [
																{
																	"key": "data",
																	"value": "{{transfered-batchnumber}}",
																	"description": "(Required) "
																},
																{
																	"key": "vendorid",
																	"value": "Mita",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "da60a1d0-dcca-4a4d-b3f0-1e687c83328c",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/msbatchshow/:data/:vendorid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"msbatchshow",
																		":data",
																		":vendorid"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "vendorid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 8742,\n  \"responsecode\": 8896,\n  \"data\": {\n    \"datesupply\": \"1988-07-20T09:03:27.876Z\",\n    \"qnty\": 4830,\n    \"meters\": \"string\",\n    \"meterbrand\": \"string\",\n    \"batch\": \"string\",\n    \"disco\": \"string\",\n    \"single\": 9994,\n    \"three\": 9237,\n    \"cost\": 8319.568050737767,\n    \"dates\": \"2007-04-13T04:02:34.175Z\"\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 2343,\n  \"currentpage\": 6771\n}"
														}
													]
												}
											],
											"id": "0f2d9495-a2ae-4975-8240-671fbb4f2066",
											"description": "vendor ID"
										}
									],
									"id": "9cfd768c-49c6-45c8-94e4-435fd04aa73b",
									"description": "batch ID"
								}
							],
							"id": "84597dd4-1912-460c-a5d4-74b0b32f715d"
						}
					],
					"id": "f84ccf1b-17ef-4e3b-9c47-f8b85db7ef5b"
				}
			],
			"id": "be1f808e-f86b-4c9e-9bc3-0f5d3a2613e6"
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "User Management",
					"item": [
						{
							"name": "Get Users",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get users",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6cb9f866-9189-4195-bee3-1abd3278cacb",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Save first user's ID as collection variable",
																	"if (jsonData.data && jsonData.data.length > 0) {",
																	"    pm.collectionVariables.set(\"user_id\", jsonData.data[0].id);",
																	"}",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate data is an array",
																	"pm.test(\"Validate data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"});",
																	"",
																	"// Validate required keys in first user object",
																	"pm.test(\"Validate required keys in first user object\", () => {",
																	"    const expectedKeys = [",
																	"        \"id\",",
																	"        \"fullname\",",
																	"        \"username\",",
																	"        \"roles\",",
																	"        \"pagerole\",",
																	"        \"disco\",",
																	"        \"prop_scheme\",",
																	"        \"canwrite\",",
																	"        \"auth_level\",",
																	"        \"mailgoup\",",
																	"        \"inroles\",",
																	"        \"lockstatus\",",
																	"        \"userpresnt\",",
																	"        \"logtime\",",
																	"        \"datejoint\",",
																	"        \"password\",",
																	"        \"passcode\",",
																	"        \"codevalid\",",
																	"        \"retry\"",
																	"    ];",
																	"",
																	"    expectedKeys.forEach(key => {",
																	"        pm.expect(jsonData.data[0]).to.have.property(key);",
																	"    });",
																	"});",
																	"",
																	"// Validate important field types in first user object",
																	"pm.test(\"Validate key types in first user object\", () => {",
																	"    const item = jsonData.data[0];",
																	"",
																	"    pm.expect(item.id).to.be.a(\"number\");",
																	"    pm.expect(item.fullname).to.be.a(\"string\");",
																	"    pm.expect(item.username).to.be.a(\"string\");",
																	"    pm.expect(item.roles).to.be.a(\"string\");",
																	"    pm.expect(item.pagerole).to.be.a(\"string\");",
																	"    pm.expect(item.prop_scheme).to.be.a(\"string\");",
																	"    pm.expect(item.canwrite).to.be.a(\"boolean\");",
																	"    pm.expect(item.auth_level).to.be.a(\"string\");",
																	"    pm.expect(item.mailgoup).to.be.a(\"boolean\");",
																	"    pm.expect(item.lockstatus).to.be.a(\"boolean\");",
																	"    pm.expect(item.userpresnt).to.be.a(\"boolean\");",
																	"    pm.expect(item.retry).to.be.a(\"number\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "0c3020fa-a9a6-4216-be9c-e498132a1602",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																"getuser",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "1693998e-480e-43c2-8278-4f8835dd62cc",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "4f25c6c7-5528-406d-83b4-7dccf32a2be4",
																	"key": "limit",
																	"value": "10",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "c90a07c2-ac1b-4a8c-9114-13dc67427f7b",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/getuser/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"getuser",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
														}
													]
												}
											],
											"id": "78348ac1-ea96-401f-bf20-d77a89b2197e"
										}
									],
									"id": "c15ad495-e218-4ea3-b45d-7a3b1a3206e7"
								}
							],
							"id": "2e37e727-8e3f-47d0-a269-bf5a1185bc05",
							"description": "This endpoint return list of users from the following user group.\n\nPMI\n\nDISREP\n\nNEMSA\n\netc"
						},
						{
							"name": "Post User activities",
							"item": [
								{
									"name": "update activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38a93eff-240e-4c2b-bd54-3a38f075422b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate top-level response fields",
													"pm.test(\"Validate top-level response fields\", () => {",
													"    pm.expect(jsonData).to.have.property(\"cc\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"data\");",
													"    pm.expect(jsonData).to.have.property(\"responsemessage\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"patterns\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"responsStatus\").that.is.a(\"boolean\");",
													"    pm.expect(jsonData).to.have.property(\"totalpage\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"currentpage\").that.is.a(\"number\");",
													"});",
													"",
													"// Validate that data is null",
													"pm.test(\"Validate data is null\", () => {",
													"    pm.expect(jsonData.data).to.eql(null);",
													"});",
													"",
													"// Validate response message",
													"pm.test(\"Validate response message\", () => {",
													"    pm.expect(jsonData.responsemessage.toLowerCase()).to.eql(\"activity saved\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ab6395a7-d23f-4bd7-a44f-947424dd8c44",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"date\": \"2025-09-07T16:40:47.810Z\",\n    \"activity\": \"Invites: Akeem Coffey (fojes@mailinator.com) invited as Admin \",\n    \"actby\": \"Mita\",\n    \"party\": \"Mita\",\n    \"readstatus\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/operations/updateactivity"
									},
									"response": [
										{
											"id": "3f6f64da-d95e-42b3-822f-7cc07c5fe96b",
											"name": "update activity",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "accept-language",
														"value": "en-US,en;q=0.9"
													},
													{
														"key": "authorization",
														"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgIVKYTucKxGIvsLdoHLkJ8du1RIoa29DdBv6diF8tCvlrW5dQpJoCYgKelk-ItwQ9itfT91a-D7Y0Z90XzkOo-bv_sBo2jvDewUhCA-WChPXcl43pCuRc0l4h902Ya1Kbo8I9AZbG4wGn6rRWBQ7g6ssBoW1595iny9hb5yV0pU55Xs0o35DRSn0tHCSp9Ff2xQEJo2B-VMUJV0eV_OIGEhEK6xOqAsP3-5A7TtFHU4FIJRshwyOE-QM5UDGpGVSmYutt161JBiRi8EPVV4hjrCWx2UqLrNn6NooxCNGvR4RlhSHthGTXP3Z37OFpsWeRt8I-4S0gk3Df5keWk9Z1wdW6vxUAn0U8rqrbddOm-X5Z0C23T2shWK3K75P13JdeNQXD-BfVD-2MFdGI5b_IPJqsFWuhiZAbD2l8dNGhCD-Zg95Id9HBAA40YMhHSJyewD_TAPVIg1yfZpP9dawJmhMIeXu3PBx9JENyjaXpoRy4eoTkQ7tcuykFWO9rht5BAJ0oPC0vrhrxz-mRGpNDU3hi3dL0HO2FVGFpCm0pEJJg",
														"disabled": true
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://primes.omniswift.com"
													},
													{
														"key": "priority",
														"value": "u=1, i"
													},
													{
														"key": "referer",
														"value": "https://primes.omniswift.com/"
													},
													{
														"key": "sec-ch-ua",
														"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
													},
													{
														"key": "sec-ch-ua-mobile",
														"value": "?0"
													},
													{
														"key": "sec-ch-ua-platform",
														"value": "\"macOS\""
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-site",
														"value": "cross-site"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"date\": \"2025-09-02T17:54:20.876Z\",\n    \"activity\": \"Invites: A Contract has been sent to Vivien Ford as Admin\",\n    \"actby\": \"PMI\",\n    \"readstatus\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/operations/updateactivity"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "content-type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "date",
													"value": "Tue, 02 Sep 2025 18:05:00 GMT"
												},
												{
													"key": "server",
													"value": "Kestrel"
												},
												{
													"key": "access-control-allow-origin",
													"value": "*"
												},
												{
													"key": "transfer-encoding",
													"value": "chunked"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"cc\": 0,\n    \"responsecode\": 200,\n    \"data\": null,\n    \"responsemessage\": \"activity saved\",\n    \"patterns\": \"\",\n    \"responsStatus\": true,\n    \"totalpage\": 0,\n    \"currentpage\": 0\n}"
										}
									]
								}
							],
							"id": "dac256ad-48f7-41e2-95c7-c2297c1ae0e9"
						},
						{
							"name": "User Invited Account",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "/api/users/invitedaccount/:data/:offset/:limit",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f549a7b9-3ab1-42c3-bbcc-639b8c9a3fe0",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is empty",
																			"pm.test(\"Validate data is empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.eql(0);",
																			"});",
																			"",
																			"// Validate response message is empty",
																			"pm.test(\"Validate response message is empty\", () => {",
																			"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "893a5664-20d8-44b6-81b8-9903e3c21230",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"invitedaccount",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "3c445015-a17b-4bc1-9c7f-192e8481c729",
																			"key": "data",
																			"value": "",
																			"description": "(Required) "
																		},
																		{
																			"id": "d526737b-aaf5-4d25-955a-ee3c39d19685",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "24bc1943-c736-4426-9554-b3fec2ec6486",
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "a728497c-106d-4100-8d00-0b4d55785f13",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														}
													],
													"id": "ab179e57-474a-4b68-bc70-35840f51ae1f"
												}
											],
											"id": "ba8b7d77-016e-45f8-955b-70a5e0a613a1"
										}
									],
									"id": "672cee6b-467f-424a-a06a-dfce161e42d2"
								}
							],
							"id": "8b2395d0-8682-4dc9-8397-50db13aa1940"
						},
						{
							"name": "Get User group role",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "get usergroup roles",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9b8c6964-db0f-4e79-b3e5-82214fc5f875",
																"exec": [
																	"const jsonData = pm.response.json();",
																	"",
																	"// Validate HTTP status code",
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// Validate API response code",
																	"pm.test(\"Validate API response code\", () => {",
																	"    pm.expect(jsonData.responsecode).to.eql(200);",
																	"});",
																	"",
																	"// Validate that data is an array",
																	"pm.test(\"Validate data is an array\", () => {",
																	"    pm.expect(jsonData.data).to.be.an(\"array\");",
																	"    pm.expect(jsonData.data.length).to.be.above(0);",
																	"});",
																	"",
																	"// Validate required keys in each object",
																	"pm.test(\"Validate each user object has required keys\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item).to.have.property(\"id\");",
																	"        pm.expect(item).to.have.property(\"usergroup\");",
																	"        pm.expect(item).to.have.property(\"role\");",
																	"    });",
																	"});",
																	"",
																	"// Validate key types and non-empty values",
																	"pm.test(\"Validate key types and non-empty values\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);",
																	"        pm.expect(item.usergroup).to.be.a(\"string\").and.to.not.be.empty;",
																	"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																	"    });",
																	"});",
																	"",
																	"// Optional: Ensure unique IDs",
																	"pm.test(\"Ensure IDs are unique\", () => {",
																	"    const ids = jsonData.data.map(item => item.id);",
																	"    const uniqueIds = new Set(ids);",
																	"    pm.expect(uniqueIds.size).to.eql(ids.length);",
																	"});",
																	"",
																	"// Optional: Check that all roles are valid strings",
																	"pm.test(\"Validate role values are not empty\", () => {",
																	"    jsonData.data.forEach(item => {",
																	"        pm.expect(item.role).to.be.a(\"string\").and.to.not.be.empty;",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"id": "92fcf66b-82b2-46b0-bb42-5bf0b10a2959",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																"usergrouprole",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "9a4d7a2e-5cd7-4d30-b156-5551e0cdad54",
																	"key": "offset",
																	"value": "1",
																	"description": "(Required) "
																},
																{
																	"id": "c826b5b8-6faf-43de-a928-07957fb2985f",
																	"key": "limit",
																	"value": "100",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "c75f9987-90cc-450e-a17d-0519cdb7187a",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/usergrouprole/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"usergrouprole",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 6051,\n  \"responsecode\": 1756,\n  \"data\": [\n    {\n      \"id\": 5434,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    },\n    {\n      \"id\": 6956,\n      \"usergroup\": \"string\",\n      \"role\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6314,\n  \"currentpage\": 633\n}"
														}
													]
												}
											],
											"id": "fe45a711-8a0a-41e1-a79e-12e87e55af3b"
										}
									],
									"id": "571bed2a-b57e-4ed6-a9c4-7dc2b537e207"
								}
							],
							"id": "e6f0f425-9b0f-4892-a3fb-d212dad7fcda"
						},
						{
							"name": "MS Invites",
							"item": [
								{
									"name": "Send Mail",
									"item": [
										{
											"name": "/sendmail",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e61c31c-c49d-4114-aad5-d96f55121de9",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Validate specific message",
															"pm.test(\"Validate verification message\", () => {",
															"    pm.expect(jsonData).to.eql(\"Verification code sent!!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "79afabe5-d2d5-4146-b476-8c2ac00d7527",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/sendmail"
											},
											"response": [
												{
													"id": "73c3e300-8fde-4e3e-a659-b3b2c411f8c4",
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"string\",\n  \"receiver\": \"string\",\n  \"subject\": \"string\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"responseTime": null,
													"body": ""
												},
												{
													"id": "61a81ef9-091a-496c-a121-1dede6c3ad33",
													"name": "/sendmail",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"message\": \"Test Email\",\n  \"receiver\": \"viviendrep@yopmail.com\",\n  \"subject\": \"string\"\n}\n// {\"receiver\":\"viviendrep@yopmail.com\",\"subject\":\"ROLE Assignment\",\"message\":\"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body {\\n        font-family: Arial, sans-serif;\\n        line-height: 1.6;\\n        color: #333;\\n        font-size: 20px;\\n      }\\n      .container {\\n        max-width: 600px;\\n        margin: auto;\\n        padding: 20px;\\n        border: 1px solid #ddd;\\n        border-radius: 5px;\\n        background-color: #f9f9f9;\\n      }\\n      .email-link {\\n        display: inline-block;\\n        margin-top: 20px;\\n        color: #3498db !important;\\n        text-decoration: underline;\\n      }\\n      .email-addy-link {\\n        font-weight: 600;\\n        color: #3498db !important;\\n      }\\n      .button {\\n        display: inline-block;\\n        margin-top: 20px;\\n        margin-bottom: 20px;\\n        padding: 10px 20px;\\n        color: #fff !important;\\n        background-color: #08A969;\\n        text-decoration: none;\\n        border-radius: 5px;\\n      }\\n      .footer {\\n        margin-top: 20px;\\n        font-size: 0.9em;\\n        color: #666;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n\\n    <h1>YOU'VE BEEN ASSIGNED A DISREP ROLE</h1>\\n    \\n    <p>Hello, <span class='email-addy-link'>viviendrep@yopmail.com</span>.</p>\\n    <p>You have been assigned a role by an Admin.</p>\\n    <a href='https://primes.omniswift.com/admin/password-setup?em=viviendrep@yopmail.com&nm=Vivien' class=\\\"button\\\">Click here to register</a>\\n    <p class=\\\"footer\\\">If you did not apply for this role, please disregard this email.</p>\\n  \\n    \\n    </div>\\n  </body>\\n</html>\\n\"}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/sendmail"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": null,
													"header": [
														{
															"key": "content-type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "date",
															"value": "Tue, 02 Sep 2025 18:18:23 GMT"
														},
														{
															"key": "server",
															"value": "Kestrel"
														},
														{
															"key": "transfer-encoding",
															"value": "chunked"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "\"Verification code sent!!\""
												}
											]
										}
									],
									"id": "1a1d83c6-fef5-4142-bae4-27cf5580557e"
								},
								{
									"name": "msinvites",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b538bc66-935e-4639-b4ae-33e93165579d",
												"exec": [
													"// Parse response JSON",
													"let jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Validate HTTP status code\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate API response code",
													"pm.test(\"Validate API response code is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"Validate responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate responsemessage",
													"pm.test(\"Validate responsemessage is 'Account created'\", () => {",
													"    pm.expect(jsonData.responsemessage).to.eql(\"Account created\");",
													"});",
													"",
													"// Validate data is null",
													"pm.test(\"Validate data is null\", () => {",
													"    pm.expect(jsonData.data).to.eql(null);",
													"});",
													"",
													"// Validate pagination values",
													"pm.test(\"Validate pagination values\", () => {",
													"    pm.expect(jsonData.totalpage).to.eql(0);",
													"    pm.expect(jsonData.currentpage).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "20e7cf0e-d5bf-4261-9dba-424826d121aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "accept-language",
												"value": "en-US,en;q=0.9"
											},
											{
												"key": "authorization",
												"value": "Bearer CfDJ8INFySu2EHZOtaHu84e5WgJWQEVvvJvcQ-DTxzb9AGbJeWp7gDWHKxTsjgltrECJ44MXiShknjCNNn1ui9WCMr7u8w47m91pRsI-r2DEWCz99KMCoGzJpVw5fZAr18FirG7fWbpKH4WY9xDA6f6-Gn1E04EditVqBb0nQC9ObkMKyIxJnw1RF-pvPEd123a51zGukKbFDX4rjChQtsmy5n8eb4IbHoTCkHEA5i9nDd-AEALPrMnQlRUQRxkqTYVnFY37KC6o_25jiSyQDNe-wYN1M1degxLqb4WXibqUH4csIdCncRfToy2uPPJKt3aiLLcTY_s-fQul3rm3K48jlpsJhV43JUbwj0TXhQ-vgCCh2RmENPeCPHw-cV4xdSsmwEkAG8UnTSE6Dl47jTlZTWIhsG4W7Mnb5Gyjamvf5tlj9V_064nAbgb0x6r1G9kCE7jrGScPx4MuB41o9_1s8NDAhf0Mo1ubrfj-321ppEA_b9kbuj54OPSL2TdLySu5DcHV1CW-OJSG1NgPGGjMmA-gS_MTwCKenzT0Dta5Eh3-B-zOgqs9sy-LNWUBoABNug"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://primes.omniswift.com"
											},
											{
												"key": "priority",
												"value": "u=1, i"
											},
											{
												"key": "referer",
												"value": "https://primes.omniswift.com/"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-site",
												"value": "cross-site"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 0,\n    \"username\": \"fojes@mailinator.com\",\n    \"firstName\": \"Akeem\",\n    \"lastName\": \"Coffey\",\n    \"role\": \"Admin\",\n    \"vendor_id\": \"Mita\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Profiles/msinvites"
									},
									"response": []
								}
							],
							"id": "530659de-b7bd-4aaf-938e-0b7a259812b5"
						},
						{
							"name": "Get Invited account",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "Metersupplier getinvite",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "683a8e66-2117-4d72-9039-2a3b3a66cb84",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																			"",
																			"//  Validate first object in data",
																			"pm.test(\"Validate first user object\", () => {",
																			"    let user = jsonData.data[0];",
																			"    pm.expect(user).to.have.property(\"id\").that.is.a(\"number\");",
																			"    pm.expect(user).to.have.property(\"username\").that.is.a(\"string\");",
																			"    pm.expect(user).to.have.property(\"role\").that.is.a(\"string\");",
																			"    pm.expect(user).to.have.property(\"firstname\").that.is.a(\"string\");",
																			"    pm.expect(user).to.have.property(\"lastname\").that.is.a(\"string\");",
																			"    pm.expect(user).to.have.property(\"vendor_id\").that.is.a(\"string\");",
																			"    pm.expect(user).to.have.property(\"datejoin\").that.is.a(\"string\");",
																			"    pm.expect(user).to.have.property(\"accountstatus\").that.is.a(\"boolean\");",
																			"    pm.expect(user).to.have.property(\"retry\").that.is.a(\"number\");",
																			"});",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination values\", () => {",
																			"    pm.expect(jsonData.totalpage).to.be.a('number');",
																			"    pm.expect(jsonData.currentpage).to.be.a('number');",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "5b798226-2077-471e-95b2-f62d2146acdf",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/getinvite/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"getinvite",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "9368108c-43a1-4f6b-8c6b-36e3d1a8c4ca",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getinvite/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getinvite",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 9668,\n  \"responsecode\": 9395,\n  \"data\": [\n    {\n      \"mailgrpup\": false,\n      \"id\": 9526,\n      \"username\": \"string\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"role\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"vendor_id\": \"string\",\n      \"datejoin\": \"1991-11-08T07:45:39.160Z\",\n      \"lastlogin\": \"2005-10-05T10:01:13.428Z\",\n      \"accountstatus\": false,\n      \"retry\": 9557,\n      \"codevalid\": \"2010-02-22T08:51:11.752Z\"\n    },\n    {\n      \"mailgrpup\": true,\n      \"id\": 9487,\n      \"username\": \"string\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"role\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"vendor_id\": \"string\",\n      \"datejoin\": \"2020-10-31T01:08:41.851Z\",\n      \"lastlogin\": \"1998-01-02T04:44:13.350Z\",\n      \"accountstatus\": false,\n      \"retry\": 3386,\n      \"codevalid\": \"1985-04-02T19:42:10.490Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 6180,\n  \"currentpage\": 4210\n}"
																}
															]
														}
													],
													"id": "f67adce8-f273-48ac-819e-23dfaceef2d1"
												}
											],
											"id": "a790d10f-187f-4011-86b4-ff58b5f4be07"
										}
									],
									"id": "e3a466ec-dfed-4fe9-abd4-5cea1d1e05f8",
									"description": "vendor ID"
								}
							],
							"id": "13f41d82-f05e-48d1-a5e8-d1eea60573ea"
						},
						{
							"name": "Get Invited Users",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "invited accounts",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7235175d-0742-4f16-836c-43f4200f17b9",
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Status code is 200\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate data is empty",
																			"pm.test(\"Validate data is empty\", () => {",
																			"    pm.expect(jsonData.data.length).to.eql(0);",
																			"});",
																			"",
																			"// Validate response message is empty",
																			"pm.test(\"Validate response message is empty\", () => {",
																			"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "edeac6b8-77c6-468a-8cee-cde936b6ef46",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users",
																		"invitedaccount",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"id": "e9e74e56-bc54-4179-acbd-3d141041c9de",
																			"key": "data",
																			"value": "",
																			"description": "(Required) "
																		},
																		{
																			"id": "9dad6c55-72be-472c-a480-9a7026202da1",
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"id": "3c552958-1231-48ed-8fe4-96665c0d624b",
																			"key": "limit",
																			"value": "100",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "4ca6cbe6-a914-4df6-aabd-19325cb314e9",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/users/invitedaccount/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"users",
																				"invitedaccount",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 8442,\n  \"responsecode\": 8569,\n  \"data\": [\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": true,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 1314,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": true,\n      \"userpresnt\": true,\n      \"logtime\": \"2007-01-16T16:09:25.230Z\",\n      \"datejoint\": \"1976-04-18T21:25:36.745Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2018-07-30T01:22:16.552Z\",\n      \"retry\": 4234\n    },\n    {\n      \"auth_level\": \"string\",\n      \"fullname\": \"string\",\n      \"inroles\": \"string\",\n      \"mailgoup\": false,\n      \"pagerole\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"roles\": \"string\",\n      \"username\": \"string\",\n      \"id\": 2482,\n      \"disco\": \"string\",\n      \"canwrite\": true,\n      \"lockstatus\": false,\n      \"userpresnt\": false,\n      \"logtime\": \"1973-11-01T09:38:38.147Z\",\n      \"datejoint\": \"2024-12-10T07:08:04.016Z\",\n      \"password\": \"string\",\n      \"passcode\": \"string\",\n      \"codevalid\": \"2025-02-18T17:02:33.245Z\",\n      \"retry\": 7126\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 5780,\n  \"currentpage\": 7557\n}"
																}
															]
														}
													],
													"id": "6e079eab-e628-4d98-b8a0-b00657ad95e6"
												}
											],
											"id": "64ffb6a0-f827-404e-9182-742ab6e38a22"
										}
									],
									"id": "e72277de-5fce-4515-bbc1-64d6203b1231",
									"description": "PMI\n\nDISREP\n\n\\--refere to prop_scheme"
								}
							],
							"id": "ab0747a1-2e67-4031-92e6-db7e5d9a3943",
							"description": "This endpoint return list of newly invited user"
						},
						{
							"name": "Cancel Invite",
							"item": [
								{
									"name": "Metersupplier cancel",
									"id": "2222ab46-9626-4a99-8801-e8da53edeb8e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"fojes@mailinator.com\",\n    \"password\": \"\",\n    \"passcode\": \"\",\n    \"role\": \"Admin\",\n    \"firstname\": \"Akeem\",\n    \"lastname\": \"Coffey\",\n    \"vendor_id\": \"Mita\",\n    \"accountstatus\": false\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Metersupplier/cancel"
									},
									"response": [
										{
											"id": "ab473eee-b1a3-4798-a342-4eb0e5dc24c2",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"mailgrpup\": true,\n  \"id\": 51,\n  \"username\": \"\",\n  \"password\": \"string\",\n  \"passcode\": \"string\",\n  \"role\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"vendor_id\": \"string\",\n  \"datejoin\": \"1968-07-07T15:37:08.175Z\",\n  \"lastlogin\": \"1982-11-20T06:52:54.510Z\",\n  \"accountstatus\": true,\n  \"retry\": 3197,\n  \"codevalid\": \"1996-03-11T22:12:38.499Z\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Metersupplier/cancel"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "6196eb8a-d946-46b5-b91a-7445c288549c"
						},
						{
							"name": "Get Meter Supplier",
							"item": [
								{
									"name": "{data}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "getmetersupplier",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "368cd723-77dc-4f62-bae9-d4f67f2518cb",
																		"exec": [
																			"// Parse response JSON",
																			"let jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code is 200\", () => {",
																			"    pm.expect(jsonData.responsecode).to.eql(200);",
																			"});",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus is true\", () => {",
																			"    pm.expect(jsonData.responsStatus).to.eql(true);",
																			"});",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => {",
																			"    pm.expect(jsonData.data).to.be.an(\"array\");",
																			"});",
																			"",
																			"// Validate first vendor object",
																			"pm.test(\"Validate first vendor object\", () => {",
																			"    let vendor = jsonData.data[0];",
																			"    pm.expect(vendor).to.have.property(\"id\").that.is.a(\"number\");",
																			"    pm.expect(vendor).to.have.property(\"m_supplier\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"m_brand\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"company\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"m_country\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"emailaddress\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"pri_contact\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"contact_email\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"company_phone\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"vendor_id\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"mailgoup\").that.is.a(\"boolean\");",
																			"    pm.expect(vendor).to.have.property(\"phone_number\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"country\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"state\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"address\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"zipcode\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"mcount\").that.is.a(\"number\");",
																			"    pm.expect(vendor).to.have.property(\"concount\").that.is.a(\"number\");",
																			"    pm.expect(vendor).to.have.property(\"accountstatus\").that.is.a(\"boolean\");",
																			"    pm.expect(vendor).to.have.property(\"datejoin\").that.is.a(\"string\");",
																			"    pm.expect(vendor).to.have.property(\"contract\").that.is.a(\"number\");",
																			"});",
																			"",
																			"// Validate pagination values",
																			"pm.test(\"Validate pagination values\", () => {",
																			"    pm.expect(jsonData.totalpage).to.eql(1);",
																			"    pm.expect(jsonData.currentpage).to.eql(1);",
																			"});",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "43bbf1f8-3d8e-4a86-8f1e-ee955401b54a",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/getmetersupplier/:data/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"getmetersupplier",
																		":data",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "Mita",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "577543f6-8c04-4036-a664-85b6ccd509a3",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/getmetersupplier/:data/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"getmetersupplier",
																				":data",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 1679,\n  \"responsecode\": 6105,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"company\": \"st\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": false,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"st\",\n      \"id\": 4417,\n      \"pri_contact\": \"string\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"string\",\n      \"lastname\": \"string\",\n      \"mcount\": 9960,\n      \"concount\": 9179,\n      \"accountstatus\": true,\n      \"datejoin\": \"1957-06-06T22:59:52.174Z\",\n      \"lastlogin\": \"2019-09-04T19:30:30.998Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"company\": \"string\",\n      \"company_phone\": \"string\",\n      \"country\": \"string\",\n      \"emailaddress\": \"string\",\n      \"m_brand\": \"string\",\n      \"m_country\": \"string\",\n      \"m_supplier\": \"string\",\n      \"mailgoup\": true,\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"zipcode\": \"string\",\n      \"id\": 6902,\n      \"pri_contact\": \"stri\",\n      \"contact_email\": \"string\",\n      \"roles\": \"string\",\n      \"vendor_id\": \"string\",\n      \"firstname\": \"str\",\n      \"lastname\": \"string\",\n      \"mcount\": 3593,\n      \"concount\": 9449,\n      \"accountstatus\": false,\n      \"datejoin\": \"1962-10-02T06:21:53.175Z\",\n      \"lastlogin\": \"1981-05-19T02:47:30.266Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 597,\n  \"currentpage\": 3718\n}"
																}
															]
														}
													],
													"id": "be4589c1-e7d9-4762-a1ac-79d26f5da923"
												}
											],
											"id": "8ef651d4-c3ad-4dc9-93d9-a82415aa9af8"
										}
									],
									"id": "d6edb61a-5960-4074-8e97-1deaca9e0554",
									"description": "vendor ID"
								}
							],
							"id": "264be024-5ab5-4c7d-81a5-b3566b8c6a6c"
						}
					],
					"id": "fbac69f1-37b1-4195-8523-e345ef0d3364"
				},
				{
					"name": "Security",
					"item": [
						{
							"name": "Update Password",
							"item": [
								{
									"name": "update password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70dedc31-a94c-4636-b9b2-14edeb0351f9",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that the response code is 200",
													"pm.test(\"Response code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test that the response message indicates password was changed",
													"pm.test(\"Response message is 'Password Changed'\", function () {",
													"    pm.expect(jsonData.responsemessage).to.eql(\"Password Changed\");",
													"});",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", function () {",
													"    pm.expect(jsonData.data).to.be.null;",
													"});",
													"",
													"// Test that responsStatus is true",
													"pm.test(\"responsStatus is true\", function () {",
													"    pm.expect(jsonData.responsStatus).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5baf3775-30a6-411b-8883-0d54463aaf0b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Profiles/updatepassword"
									},
									"response": [
										{
											"id": "01a9b2bb-dfa3-48ef-8e86-93da56d0d679",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "update password with same password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
												"exec": [
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that the response code is 400",
													"pm.test(\"Response code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test that the response message indicates password cannot be the same",
													"pm.test(\"Response message indicates cannot change to same password\", function () {",
													"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
													"});",
													"",
													"// Test that data is null",
													"pm.test(\"Data is null\", function () {",
													"    pm.expect(jsonData.data).to.be.null;",
													"});",
													"",
													"// Test that responsStatus is true",
													"pm.test(\"responsStatus is true\", function () {",
													"    pm.expect(jsonData.responsStatus).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9b3da983-f9e0-4514-8f5b-42ea0c0e67e0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester@123\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Profiles/updatepassword"
									},
									"response": [
										{
											"id": "7e9c11d0-3285-4512-beab-0848b4265d31",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								},
								{
									"name": "validate password complexity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6808dbf2-b489-4c5c-bd8d-cc5b701fdd80",
												"exec": [
													"// Get the request body",
													"let body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
													"let password = body.newpassword;",
													"",
													"if (!password) {",
													"    pm.test(\"Password validation\", function () {",
													"        pm.expect.fail(\"newpassword is missing from payload\");",
													"    });",
													"} else {",
													"    let minLength = password.length >= 8;",
													"    let hasUppercase = /[A-Z]/.test(password);",
													"    let hasLowercase = /[a-z]/.test(password);",
													"    let hasNumber = /[0-9]/.test(password);",
													"    let hasSpecialChar = /[!@#$%^&*(),.?\\\":{}|<>]/.test(password);",
													"",
													"    pm.test(\"Password meets complexity requirements\", function () {",
													"        pm.expect(minLength, \"Minimum 8 characters\").to.be.true;",
													"        pm.expect(hasUppercase, \"Has uppercase\").to.be.true;",
													"        pm.expect(hasLowercase, \"Has lowercase\").to.be.true;",
													"        pm.expect(hasNumber, \"Has number\").to.be.true;",
													"        pm.expect(hasSpecialChar, \"Has special character\").to.be.true;",
													"    });",
													"}",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Test that the response code is 400",
													"pm.test(\"Response code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test that the response message indicates password cannot be the same",
													"pm.test(\"Response message indicates cannot change to same password\", function () {",
													"    pm.expect(jsonData.responsemessage).to.include(\"cannot change password\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3108c003-9135-44ba-af97-247988966ef0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"gilmaf@yopmail.com\",\n    \"password\": \"Tester@123\",\n    \"newpassword\": \"Tester\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/Profiles/updatepassword"
									},
									"response": [
										{
											"id": "e4005f5c-2e88-4121-8947-92285bb19634",
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"newpassword\": \"string\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/Profiles/updatepassword"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "f6d1ce8e-a97a-4b66-904a-7a5710f4de2e"
						}
					],
					"id": "7e9c478d-5f4b-45ac-85eb-7d66d40b9e3d"
				}
			],
			"id": "eb7c448b-9ab9-4189-9f91-0866fd20394a"
		},
		{
			"name": "MS Installer quick view",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "msinstallerquick",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8a023b8-d409-4d50-911a-1996de949a35",
										"exec": [
											"// Parse response JSON",
											"let jsonData = pm.response.json();",
											"",
											"// Validate HTTP status code",
											"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
											"",
											"// Validate API response code",
											"pm.test(\"Validate API response code\", () => pm.expect(jsonData.responsecode).to.eql(200));",
											"",
											"// Validate responsStatus is true",
											"pm.test(\"Validate responsStatus\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
											"",
											"// Validate data is an object",
											"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
											"",
											"// Validate fields inside data",
											"if (jsonData.data) {",
											"    pm.test(\"Validate total is a number\", () => pm.expect(jsonData.data.total).to.be.a(\"number\"));",
											"    pm.test(\"Validate active is a number\", () => pm.expect(jsonData.data.active).to.be.a(\"number\"));",
											"    pm.test(\"Validate pending is a number\", () => pm.expect(jsonData.data.pending).to.be.a(\"number\"));",
											"}",
											"",
											"// Validate pagination",
											"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
											"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "981b322f-27c0-48e6-9446-6535f6a42626",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/installers/msinstallerquickx/:data",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"installers",
										"msinstallerquickx",
										":data"
									],
									"variable": [
										{
											"key": "data",
											"value": "Mita",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"id": "61f0e717-711e-4426-a61c-a1aac82129c2",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/installers/msinstallerquickx/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"installers",
												"msinstallerquickx",
												":data"
											],
											"variable": [
												{
													"key": "data"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 2513,\n  \"responsecode\": 2466,\n  \"data\": {\n    \"total\": 8345,\n    \"active\": 9518,\n    \"pending\": 2341\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 9003,\n  \"currentpage\": 8376\n}"
								}
							]
						}
					],
					"id": "668d7ef7-1b4c-4384-9770-cac453041958",
					"description": "Meter Supplier"
				}
			],
			"id": "358401e0-cce8-41c5-8455-000b8018eeb9"
		},
		{
			"name": "Post Comment",
			"item": [
				{
					"name": "postcomment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "743f362e-ef90-4831-abb7-06c909111d74",
								"exec": [
									"// Parse response JSON",
									"let jsonData = pm.response.json();",
									"",
									"// Validate HTTP status code",
									"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
									"",
									"// Validate API response code",
									"pm.test(\"Validate API response code is 301\", () => pm.expect(jsonData.responsecode).to.eql(301));",
									"",
									"// Validate responsStatus is false",
									"pm.test(\"Validate responsStatus is false\", () => pm.expect(jsonData.responsStatus).to.eql(false));",
									"",
									"// Validate data is null",
									"pm.test(\"Validate data is null\", () => pm.expect(jsonData.data).to.be.null);",
									"",
									"// Validate responsemessage exists and matches expected text",
									"pm.test(\"Validate responsemessage is correct\", () => {",
									"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
									"    pm.expect(jsonData.responsemessage).to.eql(\"Can not post comment, string not found in contract \");",
									"});",
									"",
									"// Validate pagination values",
									"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
									"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "11f298ad-f9cd-4342-8d89-5819a1219bf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"comment\": \"string\",\n  \"commentby\": \"mitams@yopmail.com\",\n  \"contract_id\": \"{{contract_id}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/operations/postcomment"
					},
					"response": [
						{
							"id": "25c6c8f5-3c06-45df-a100-76589f93b2ba",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"comment\": \"string\",\n  \"commentby\": \"string\",\n  \"contract_id\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/operations/postcomment"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "ac2010e4-c21c-47b7-9c76-b6903da24536"
		},
		{
			"name": "Get Meter by Group Batch",
			"item": [
				{
					"name": "{vendorid}",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "msmetergroupbatch",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0a03fee6-861a-4555-bafc-3a83c6735dfd",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
															"",
															"// Validate API response code",
															"pm.test(\"Validate API response code is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
															"",
															"// Validate responsStatus is true",
															"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
															"",
															"// Validate data is an array",
															"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
															"",
															"// Validate each batch object has required properties and correct types",
															"jsonData.data.forEach((batch, index) => {",
															"    pm.test(`Batch ${index + 1} - Validate required properties`, () => {",
															"        pm.expect(batch).to.have.property(\"batch\").that.is.a(\"string\");",
															"        pm.expect(batch).to.have.property(\"cost\").that.is.a(\"number\");",
															"        pm.expect(batch).to.have.property(\"brand\").that.is.a(\"string\");",
															"        pm.expect(batch).to.have.property(\"datesubmit\").that.is.a(\"string\");",
															"        pm.expect(batch).to.have.property(\"single\").that.is.a(\"number\");",
															"        pm.expect(batch).to.have.property(\"three\").that.is.a(\"number\");",
															"    });",
															"});",
															"",
															"// Validate pagination values are numbers",
															"pm.test(\"Validate pagination values are numbers\", () => {",
															"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
															"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "ce6e1bfe-fe24-4a39-a7b3-4bc72da7002b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/msmetergroupbatch/:vendorid/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"msmetergroupbatch",
														":vendorid",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "vendorid",
															"value": "Mita",
															"description": "(Required) "
														},
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "10",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "5470706d-489c-45e6-9231-d94ad8327e8e",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/msmetergroupbatch/:vendorid/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"msmetergroupbatch",
																":vendorid",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "vendorid"
																},
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 4920,\n  \"responsecode\": 1273,\n  \"data\": [\n    {\n      \"batch\": \"stri\",\n      \"cost\": 7928.814647171964,\n      \"brand\": \"string\",\n      \"datesubmit\": \"1975-10-14T19:49:33.764Z\",\n      \"single\": 2032,\n      \"three\": 4666\n    },\n    {\n      \"batch\": \"string\",\n      \"cost\": 4118.094185123724,\n      \"brand\": \"string\",\n      \"datesubmit\": \"1982-07-17T06:58:47.024Z\",\n      \"single\": 2699,\n      \"three\": 257\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2644,\n  \"currentpage\": 5400\n}"
												}
											]
										}
									],
									"id": "78bf1a80-e60f-4cde-9a37-facbc88da3dc"
								}
							],
							"id": "62272b6a-af37-45c5-9051-c743f3a08d78"
						}
					],
					"id": "8d44280f-8a62-487b-9639-6284ed5070c6"
				}
			],
			"id": "05def4c7-e584-4092-975f-3c8a673f98e1"
		},
		{
			"name": "Get meter supplier by meter batch",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "meterbatch",
											"id": "02f7c5ba-d900-4bab-b0aa-fb23861791a9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/meterbatch/:data/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"meterbatch",
														":data",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "f52b0e30-8547-4776-951a-304139d52cab",
															"key": "data",
															"value": "string",
															"description": "(Required) "
														},
														{
															"id": "dbe29013-6894-498b-b712-78c8e15e3915",
															"key": "offset",
															"value": "147",
															"description": "(Required) "
														},
														{
															"id": "918bc09f-137a-4a3b-9693-482d88234169",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "afa6c025-45c9-4904-868d-0de1748b7db0",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/meterbatch/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"meterbatch",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 4621,\n  \"responsecode\": 2683,\n  \"data\": [\n    {\n      \"datesupply\": \"1965-09-14T21:20:52.417Z\",\n      \"qnty\": 6758,\n      \"meters\": \"string\",\n      \"meterbrand\": \"string\",\n      \"batch\": \"string\",\n      \"disco\": \"string\",\n      \"single\": 9921,\n      \"three\": 7699,\n      \"cost\": 8580.766859258703,\n      \"dates\": \"1977-11-18T07:10:41.959Z\"\n    },\n    {\n      \"datesupply\": \"2011-06-06T00:57:43.187Z\",\n      \"qnty\": 8004,\n      \"meters\": \"string\",\n      \"meterbrand\": \"string\",\n      \"batch\": \"string\",\n      \"disco\": \"string\",\n      \"single\": 6046,\n      \"three\": 9353,\n      \"cost\": 8131.3245279123785,\n      \"dates\": \"2013-10-29T01:53:45.535Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 6828,\n  \"currentpage\": 7979\n}"
												}
											]
										}
									],
									"id": "4c638c89-9f87-4487-b0ff-7f9911dff375"
								}
							],
							"id": "cc253f09-1002-4131-ac0b-9747a0242aa3"
						}
					],
					"id": "42a87bb6-8fd6-4748-a05a-0e6e24edcc62",
					"description": "vendor id"
				}
			],
			"id": "368c88c4-7687-4ac8-9fd3-38df71ad8070"
		},
		{
			"name": "Get schedule by batch",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{vendor}",
							"item": [
								{
									"name": "{disco}",
									"item": [
										{
											"name": "{offset}",
											"item": [
												{
													"name": "{limit}",
													"item": [
														{
															"name": "msschedulebatch",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "53c256f0-f3c7-402d-b995-3fcee2461bfe",
																		"exec": [
																			"// Parse response JSON",
																			"const jsonData = pm.response.json();",
																			"",
																			"// Validate HTTP status code",
																			"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
																			"",
																			"// Validate API response code",
																			"pm.test(\"Validate API response code is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
																			"",
																			"// Validate responsStatus is true",
																			"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
																			"",
																			"// Validate data is an array",
																			"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
																			"",
																			"// Validate pagination values are numbers",
																			"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
																			"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"id": "2b9963c7-5f00-4c8b-a4d8-a57db9218b43",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/msschedulebatch/:data/:vendor/:disco/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"msschedulebatch",
																		":data",
																		":vendor",
																		":disco",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data",
																			"value": "",
																			"description": "(Required) "
																		},
																		{
																			"key": "vendor",
																			"value": "",
																			"description": "(Required) "
																		},
																		{
																			"key": "disco",
																			"value": "Abuja Electricity Distribution Company",
																			"description": "(Required) "
																		},
																		{
																			"key": "offset",
																			"value": "1",
																			"description": "(Required) "
																		},
																		{
																			"key": "limit",
																			"value": "10",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"response": [
																{
																	"id": "ecf270a7-7f7d-4973-b82b-2ec2be5c64a7",
																	"name": "OK",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "text/plain"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/Metersupplier/msschedulebatch/:data/:vendor/:disco/:offset/:limit",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"Metersupplier",
																				"msschedulebatch",
																				":data",
																				":vendor",
																				":disco",
																				":offset",
																				":limit"
																			],
																			"variable": [
																				{
																					"key": "data"
																				},
																				{
																					"key": "vendor"
																				},
																				{
																					"key": "disco"
																				},
																				{
																					"key": "offset"
																				},
																				{
																					"key": "limit"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"responseTime": null,
																	"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
																}
															]
														}
													],
													"id": "d212d4ee-41f6-474b-b74d-4222a9656320"
												}
											],
											"id": "f365082d-7901-40df-8f1d-ad8e9180556d"
										}
									],
									"id": "032ab76b-f23c-4d0a-890c-abcad4631f4e"
								}
							],
							"id": "06e49087-d1a9-41b4-acbf-cb3d2565f843"
						}
					],
					"id": "aa3e3f75-8881-443d-99ce-2f1305619f0c",
					"description": "batch id"
				}
			],
			"id": "eec2a6fe-912b-472b-9cde-04ee14b7857c"
		},
		{
			"name": "Get Meter Inventory",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{status}",
							"item": [
								{
									"name": "{offset}",
									"item": [
										{
											"name": "{limit}",
											"item": [
												{
													"name": "/api/Metersupplier/meterinventory/:data/:status/:offset/:limit",
													"id": "db9bab84-1ed5-40af-81cc-8a986548786b",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/meterinventory/:data/:status/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"meterinventory",
																":data",
																":status",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"id": "99b8c4a0-817f-443b-8ca8-ab6cfbdb126d",
																	"key": "data",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"id": "f18372aa-d420-414d-aa54-b879d99015e7",
																	"key": "status",
																	"value": "string",
																	"description": "(Required) "
																},
																{
																	"id": "f6e00976-4767-4a45-8f52-3ae647610bef",
																	"key": "offset",
																	"value": "147",
																	"description": "(Required) "
																},
																{
																	"id": "cb0d1c25-3cc8-4633-b6e6-2b1cae756d0c",
																	"key": "limit",
																	"value": "147",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"id": "eb23c262-6fed-4537-98e6-0f1912932953",
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "text/plain"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/Metersupplier/meterinventory/:data/:status/:offset/:limit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"Metersupplier",
																		"meterinventory",
																		":data",
																		":status",
																		":offset",
																		":limit"
																	],
																	"variable": [
																		{
																			"key": "data"
																		},
																		{
																			"key": "status"
																		},
																		{
																			"key": "offset"
																		},
																		{
																			"key": "limit"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n  \"cc\": 4739,\n  \"responsecode\": 8194,\n  \"data\": [\n    {\n      \"batch_number\": \"string\",\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"nemsa_status\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 6715,\n      \"date_supplied\": \"1991-08-29T20:51:48.421Z\",\n      \"vendorname\": \"string\",\n      \"nemsa_seal\": \"string\",\n      \"customerid\": \"string\",\n      \"prop_scheme\": \"st\",\n      \"metercost\": 4869.737852321895,\n      \"location\": \"string\",\n      \"endate\": \"1997-08-18T12:00:05.724Z\",\n      \"jcount\": 7646,\n      \"tid\": 1088,\n      \"expected_date\": \"1968-02-20T06:16:16.902Z\",\n      \"contract_id\": \"string\"\n    },\n    {\n      \"batch_number\": \"string\",\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"nemsa_status\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 7765,\n      \"date_supplied\": \"2005-04-13T10:40:37.053Z\",\n      \"vendorname\": \"string\",\n      \"nemsa_seal\": \"string\",\n      \"customerid\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"metercost\": 7604.168116102174,\n      \"location\": \"string\",\n      \"endate\": \"1968-02-15T06:50:24.849Z\",\n      \"jcount\": 5837,\n      \"tid\": 6402,\n      \"expected_date\": \"1989-05-24T13:14:08.489Z\",\n      \"contract_id\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8073,\n  \"currentpage\": 2226\n}"
														}
													]
												}
											],
											"id": "64c4cd7b-0373-4515-b95b-f9359d059a08"
										}
									],
									"id": "0ab3ae14-f999-40bc-9e89-f8d13102ed1b"
								}
							],
							"id": "579f789c-6ad6-400c-aab6-7dee250131c1"
						},
						{
							"name": "meterinventory",
							"id": "1dcb3b33-409a-4c31-8489-1b2ef7bb1bed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/Metersupplier/meterinventory/:data",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Metersupplier",
										"meterinventory",
										":data"
									],
									"variable": [
										{
											"id": "179677c5-f434-4494-8707-572d7d9fab19",
											"key": "data",
											"value": "string",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"id": "fa92d573-5d4f-43bc-b4cd-cfbef91dcc88",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Metersupplier/meterinventory/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Metersupplier",
												"meterinventory",
												":data"
											],
											"variable": [
												{
													"key": "data"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 4739,\n  \"responsecode\": 8194,\n  \"data\": [\n    {\n      \"batch_number\": \"string\",\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"nemsa_status\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 6715,\n      \"date_supplied\": \"1991-08-29T20:51:48.421Z\",\n      \"vendorname\": \"string\",\n      \"nemsa_seal\": \"string\",\n      \"customerid\": \"string\",\n      \"prop_scheme\": \"st\",\n      \"metercost\": 4869.737852321895,\n      \"location\": \"string\",\n      \"endate\": \"1997-08-18T12:00:05.724Z\",\n      \"jcount\": 7646,\n      \"tid\": 1088,\n      \"expected_date\": \"1968-02-20T06:16:16.902Z\",\n      \"contract_id\": \"string\"\n    },\n    {\n      \"batch_number\": \"string\",\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"nemsa_status\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 7765,\n      \"date_supplied\": \"2005-04-13T10:40:37.053Z\",\n      \"vendorname\": \"string\",\n      \"nemsa_seal\": \"string\",\n      \"customerid\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"metercost\": 7604.168116102174,\n      \"location\": \"string\",\n      \"endate\": \"1968-02-15T06:50:24.849Z\",\n      \"jcount\": 5837,\n      \"tid\": 6402,\n      \"expected_date\": \"1989-05-24T13:14:08.489Z\",\n      \"contract_id\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 8073,\n  \"currentpage\": 2226\n}"
								}
							]
						}
					],
					"id": "2de5f660-3c36-4f9b-8888-a8106d1f8791",
					"description": "vendor ID"
				}
			],
			"id": "c7f85fd6-6c86-467c-857d-3a87de423820"
		},
		{
			"name": "Get Meter Supplier Account Data",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "getaccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce53b67f-414b-4c42-b979-ce23d6146a57",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate HTTP status code",
											"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
											"",
											"// Validate responsecode",
											"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
											"",
											"// Validate responsStatus",
											"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
											"",
											"// Validate data is an object",
											"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
											"",
											"// Validate required fields in data",
											"pm.test(\"Validate id is a number\", () => pm.expect(jsonData.data.id).to.be.a(\"number\"));",
											"pm.test(\"Validate username is a string\", () => pm.expect(jsonData.data.username).to.be.a(\"string\"));",
											"pm.test(\"Validate password is a string\", () => pm.expect(jsonData.data.password).to.be.a(\"string\"));",
											"pm.test(\"Validate passcode is a string\", () => pm.expect(jsonData.data.passcode).to.be.a(\"string\"));",
											"pm.test(\"Validate mailgrpup is a boolean\", () => pm.expect(jsonData.data.mailgrpup).to.be.a(\"boolean\"));",
											"pm.test(\"Validate role is a string\", () => pm.expect(jsonData.data.role).to.be.a(\"string\"));",
											"pm.test(\"Validate firstname is a string\", () => pm.expect(jsonData.data.firstname).to.be.a(\"string\"));",
											"pm.test(\"Validate lastname is a string\", () => pm.expect(jsonData.data.lastname).to.be.a(\"string\"));",
											"pm.test(\"Validate vendor_id is a string\", () => pm.expect(jsonData.data.vendor_id).to.be.a(\"string\"));",
											"pm.test(\"Validate datejoin is a string\", () => pm.expect(jsonData.data.datejoin).to.be.a(\"string\"));",
											"pm.test(\"Validate lastlogin is a string\", () => pm.expect(jsonData.data.lastlogin).to.be.a(\"string\"));",
											"pm.test(\"Validate accountstatus is a boolean\", () => pm.expect(jsonData.data.accountstatus).to.be.a(\"boolean\"));",
											"pm.test(\"Validate retry is a number\", () => pm.expect(jsonData.data.retry).to.be.a(\"number\"));",
											"pm.test(\"Validate codevalid is a string\", () => pm.expect(jsonData.data.codevalid).to.be.a(\"string\"));",
											"",
											"// Validate pagination fields",
											"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
											"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "43dfc2d3-9c0c-4ae2-ba1e-64f6eadf28a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/Metersupplier/getaccount/:data",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Metersupplier",
										"getaccount",
										":data"
									],
									"variable": [
										{
											"key": "data",
											"value": "Mita",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"id": "a4c774b8-4dce-4c7c-ac68-3f5e9223fdb8",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Metersupplier/getaccount/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Metersupplier",
												"getaccount",
												":data"
											],
											"variable": [
												{
													"key": "data"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 4993,\n  \"responsecode\": 5869,\n  \"data\": {\n    \"mailgrpup\": false,\n    \"id\": 2600,\n    \"username\": \"string\",\n    \"password\": \"string\",\n    \"passcode\": \"string\",\n    \"role\": \"string\",\n    \"firstname\": \"string\",\n    \"lastname\": \"string\",\n    \"vendor_id\": \"string\",\n    \"datejoin\": \"1963-02-04T02:56:09.625Z\",\n    \"lastlogin\": \"1956-08-23T05:14:19.085Z\",\n    \"accountstatus\": false,\n    \"retry\": 99,\n    \"codevalid\": \"1959-07-31T12:48:29.545Z\"\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2523,\n  \"currentpage\": 274\n}"
								}
							]
						}
					],
					"id": "8f411b3a-833c-4838-a7de-2507c2740fde",
					"description": "vendor id"
				}
			],
			"id": "c72bfc8d-e76c-485e-a69c-fbd901505a00"
		},
		{
			"name": "Track meter transfer",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "tracktransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bab16b4-640a-4f7b-afed-7b535e615af3",
										"exec": [
											"// Parse response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate HTTP status code",
											"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
											"",
											"// Validate responsecode",
											"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
											"",
											"// Validate responsStatus",
											"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
											"",
											"// Validate data object exists",
											"pm.test(\"Validate data is an object\", () => pm.expect(jsonData.data).to.be.an(\"object\"));",
											"",
											"// Validate fields in data",
											"pm.test(\"Validate total is a number\", () => pm.expect(jsonData.data.total).to.be.a(\"number\"));",
											"pm.test(\"Validate totalmeter is a number\", () => pm.expect(jsonData.data.totalmeter).to.be.a(\"number\"));",
											"pm.test(\"Validate transfer is a number\", () => pm.expect(jsonData.data.transfer).to.be.a(\"number\"));",
											"pm.test(\"Validate transfermeter is a number\", () => pm.expect(jsonData.data.transfermeter).to.be.a(\"number\"));",
											"pm.test(\"Validate reject is a number\", () => pm.expect(jsonData.data.reject).to.be.a(\"number\"));",
											"pm.test(\"Validate rejectmeter is a number\", () => pm.expect(jsonData.data.rejectmeter).to.be.a(\"number\"));",
											"",
											"// Validate pagination values are numbers",
											"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
											"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8db39be9-91d2-438f-b9dd-9bd8626795c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/Metersupplier/tracktransfer/:data",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Metersupplier",
										"tracktransfer",
										":data"
									],
									"variable": [
										{
											"key": "data",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"id": "8688d039-8b86-4df7-86d7-ddf16d3131c7",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Metersupplier/tracktransfer/:data",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Metersupplier",
												"tracktransfer",
												":data"
											],
											"variable": [
												{
													"key": "data"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n  \"cc\": 8678,\n  \"responsecode\": 6889,\n  \"data\": {\n    \"total\": 274,\n    \"totalmeter\": 4613,\n    \"transfer\": 7123,\n    \"transfermeter\": 3560,\n    \"reject\": 896,\n    \"rejectmeter\": 2956\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 4411,\n  \"currentpage\": 7054\n}"
								}
							]
						}
					],
					"id": "c7dadc99-3514-4000-83e0-4b7373188b7b",
					"description": "vendor id"
				}
			],
			"id": "d09c263d-8a98-42e7-896c-d1cb66af4ac9"
		},
		{
			"name": "Get logs",
			"item": [
				{
					"name": "{offset}",
					"item": [
						{
							"name": "{limit}",
							"item": [
								{
									"name": "getapplogs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fde44b16-4fdc-4707-a1e5-3cb62e78da40",
												"exec": [
													"// Parse response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
													"",
													"// Validate API response code",
													"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
													"",
													"// Validate responsStatus is true",
													"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
													"",
													"// Validate data is an array",
													"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
													"",
													"// Validate each item in data has required fields with correct types",
													"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
													"    jsonData.data.forEach((item, index) => {",
													"        pm.test(`Item ${index + 1} - id is a number`, () => pm.expect(item.id).to.be.a(\"number\"));",
													"        pm.test(`Item ${index + 1} - logdate is a string`, () => pm.expect(item.logdate).to.be.a(\"string\"));",
													"        pm.test(`Item ${index + 1} - logtype is a string`, () => pm.expect(item.logtype).to.be.a(\"string\"));",
													"        pm.test(`Item ${index + 1} - logmessage is a string`, () => pm.expect(item.logmessage).to.be.a(\"string\"));",
													"        pm.test(`Item ${index + 1} - logby is a string`, () => pm.expect(item.logby).to.be.a(\"string\"));",
													"        pm.test(`Item ${index + 1} - logid is a string`, () => pm.expect(item.logid).to.be.a(\"string\"));",
													"        pm.test(`Item ${index + 1} - logevent is a string`, () => pm.expect(item.logevent).to.be.a(\"string\"));",
													"    });",
													"",
													"    // Validate logid uniqueness",
													"    const logIds = jsonData.data.map(item => item.logid);",
													"    const uniqueLogIds = [...new Set(logIds)];",
													"    pm.test(\"Validate all logid values are unique\", () => pm.expect(uniqueLogIds.length).to.eql(logIds.length));",
													"}",
													"",
													"// Validate pagination values are numbers",
													"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
													"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
													"",
													"// Validate currentpage is not greater than totalpage",
													"pm.test(\"Validate currentpage <= totalpage\", () => pm.expect(jsonData.currentpage).to.be.at.most(jsonData.totalpage));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "559de18d-4930-4616-8411-d552434c3a4e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"getapplogs",
												":offset",
												":limit"
											],
											"variable": [
												{
													"key": "offset",
													"value": "1",
													"description": "(Required) "
												},
												{
													"key": "limit",
													"value": "10",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "4c7c8f3e-83f4-4993-953b-d746edafb3a5",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/getapplogs/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"getapplogs",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "offset"
														},
														{
															"key": "limit"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 7800,\n  \"responsecode\": 2126,\n  \"data\": [\n    {\n      \"id\": 2696,\n      \"logdate\": \"1966-08-12T11:20:03.828Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"string\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    },\n    {\n      \"id\": 5677,\n      \"logdate\": \"1959-11-14T22:48:55.120Z\",\n      \"logtype\": \"string\",\n      \"logmessage\": \"stri\",\n      \"logby\": \"string\",\n      \"logid\": \"string\",\n      \"logevent\": \"string\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 4654,\n  \"currentpage\": 2335\n}"
										}
									]
								}
							],
							"id": "dd23efbe-5c15-4f51-9701-92b3b1c04c9d"
						}
					],
					"id": "3caeed41-0b45-4e62-b8e3-931aa831a223"
				}
			],
			"id": "7e855736-d4b2-482d-89a9-743e7d7632fd"
		},
		{
			"name": "Get Meters",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "getmeters",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4e9a6661-a163-4048-ba38-354939ce7c85",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
															"",
															"// Validate responsecode",
															"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
															"",
															"// Validate responsStatus",
															"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
															"",
															"// Validate data is null",
															"pm.test(\"Validate data is null\", () => pm.expect(jsonData.data).to.be.null);",
															"",
															"// Validate pagination fields",
															"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
															"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "f336b47b-5428-45fd-aa87-37eda25f8d89",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/getmeters/:data/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"getmeters",
														":data",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														},
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "10",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "0b71fbaa-1861-455c-a1ec-308d48e58e18",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/getmeters/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"getmeters",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 6986,\n  \"responsecode\": 7210,\n  \"data\": [\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9074,\n      \"date_supplied\": \"2007-09-27T15:30:38.478Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"stri\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2016-08-13T18:58:28.870Z\",\n      \"date_purchase\": \"2021-03-14T18:25:56.434Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 3584.0934547208535,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1979-02-19T19:34:09.225Z\",\n      \"mstransfer\": false,\n      \"msdate\": \"2021-10-19T18:33:42.512Z\",\n      \"acceptdisco\": false,\n      \"discodate\": \"1975-06-16T12:02:30.160Z\",\n      \"expected_date\": \"2001-08-02T13:44:08.646Z\"\n    },\n    {\n      \"carton_number\": \"string\",\n      \"disco\": \"string\",\n      \"meter_brand\": \"string\",\n      \"meter_number\": \"string\",\n      \"meter_phase\": \"string\",\n      \"meter_type\": \"string\",\n      \"vendor_id\": \"string\",\n      \"id\": 9640,\n      \"date_supplied\": \"1995-06-30T23:01:26.402Z\",\n      \"batch_number\": \"string\",\n      \"vendorname\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"discorejectreason\": \"string\",\n      \"certified\": true,\n      \"datecertified\": \"2025-06-24T21:39:03.905Z\",\n      \"date_purchase\": \"1967-03-21T03:10:34.895Z\",\n      \"contract_id\": \"string\",\n      \"metercost\": 4500.344040579708,\n      \"sealnumber\": \"string\",\n      \"comment\": \"string\",\n      \"status\": \"string\",\n      \"approvedate\": \"1952-09-09T23:26:30.833Z\",\n      \"mstransfer\": true,\n      \"msdate\": \"1969-02-03T02:30:30.429Z\",\n      \"acceptdisco\": true,\n      \"discodate\": \"1978-05-07T08:20:16.972Z\",\n      \"expected_date\": \"2011-06-08T06:52:36.884Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": true,\n  \"totalpage\": 9928,\n  \"currentpage\": 9033\n}"
												}
											]
										}
									],
									"id": "45748f4e-8ca8-4e75-b82a-28c0c3ba8541"
								}
							],
							"id": "d4a6b941-3b8f-43eb-84c5-e6ccd871a97f"
						}
					],
					"id": "8e75a4a7-dd35-4d53-81e5-3494e3b28d21",
					"description": "vendor id"
				}
			],
			"id": "bddf5e96-9dfa-4bd2-8f73-afad95ddaf4f"
		},
		{
			"name": "Get Schedule by ID",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "schedulebyid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1bc9017-9332-466c-bc09-5ee41c21f469",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
															"",
															"// Validate responsecode",
															"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
															"",
															"// Validate responsStatus",
															"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
															"",
															"// Validate data is an array",
															"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
															"",
															"// Validate pagination fields",
															"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
															"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "899ff606-58fd-424a-89e7-2019a4f086f3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/customers/schedulebyid/:data/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"customers",
														"schedulebyid",
														":data",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														},
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "100",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "db0e3385-3156-493c-aca3-1a884ef32c90",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/customers/schedulebyid/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"customers",
																"schedulebyid",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 4734,\n  \"responsecode\": 5585,\n  \"data\": [\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 4016,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"string\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1952-01-27T07:15:17.335Z\",\n      \"install_date\": \"2005-08-16T00:52:30.281Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"1946-06-18T08:54:55.756Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"2012-06-21T16:17:12.382Z\",\n      \"date_disco\": \"2008-12-27T12:13:46.349Z\",\n      \"expected_date\": \"2009-09-03T15:04:52.482Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 1864.9558082636852,\n      \"longitude\": 7547.89165302543,\n      \"d_latitude\": 844.0323014131156,\n      \"d_longitude\": 8275.770121751766,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1999-11-21T17:43:01.124Z\",\n      \"date_installer_assigned\": \"2005-02-20T17:19:37.057Z\",\n      \"scheduledate\": \"1948-11-24T19:51:56.591Z\",\n      \"installationstatus\": true,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": true,\n      \"installerarrived_date\": \"2024-11-15T07:20:53.672Z\",\n      \"installationstarts\": false,\n      \"installationstarts_date\": \"1983-07-01T02:53:13.124Z\"\n    },\n    {\n      \"address\": \"string\",\n      \"customerid\": \"string\",\n      \"disco\": \"string\",\n      \"fullname\": \"string\",\n      \"lga\": \"string\",\n      \"location\": \"string\",\n      \"meter_phase\": \"string\",\n      \"phone_number\": \"string\",\n      \"state\": \"string\",\n      \"id\": 7161,\n      \"emaill_address\": \"string\",\n      \"schedule_id\": \"str\",\n      \"feeder_name\": \"string\",\n      \"vendor_id\": \"string\",\n      \"prop_scheme\": \"string\",\n      \"dt\": \"string\",\n      \"meter_number\": \"string\",\n      \"installation_status\": \"string\",\n      \"installer_number\": \"string\",\n      \"installer_sealnumber\": \"string\",\n      \"installer\": \"string\",\n      \"date_assigned\": \"1966-01-28T15:53:53.650Z\",\n      \"install_date\": \"1967-02-02T04:20:55.947Z\",\n      \"installer_remark\": \"string\",\n      \"customer_remark\": \"string\",\n      \"disco_seal\": \"strin\",\n      \"nemsa_seal\": \"string\",\n      \"customer_date\": \"2005-02-21T20:41:39.826Z\",\n      \"commissioned\": true,\n      \"date_commissioned\": \"1963-05-19T23:46:27.251Z\",\n      \"date_disco\": \"1964-05-11T09:05:56.627Z\",\n      \"expected_date\": \"1973-03-27T22:59:57.338Z\",\n      \"disco_remark\": \"string\",\n      \"contract_id\": \"string\",\n      \"supervisor\": \"string\",\n      \"latitude\": 9715.56613959533,\n      \"longitude\": 4423.256591439899,\n      \"d_latitude\": 9848.76170335838,\n      \"d_longitude\": 4507.176657299873,\n      \"installer_accept_status\": false,\n      \"date_installer_accepted\": \"1962-04-15T22:04:20.740Z\",\n      \"date_installer_assigned\": \"1979-06-12T22:26:53.638Z\",\n      \"scheduledate\": \"1970-12-05T12:52:55.839Z\",\n      \"installationstatus\": false,\n      \"installationid\": \"string\",\n      \"meterengineer\": \"string\",\n      \"region\": \"string\",\n      \"csp\": \"string\",\n      \"tsp\": \"string\",\n      \"installerarrived\": false,\n      \"installerarrived_date\": \"1996-06-03T00:09:30.698Z\",\n      \"installationstarts\": true,\n      \"installationstarts_date\": \"2004-05-04T21:54:18.450Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 2795,\n  \"currentpage\": 5599\n}"
												}
											]
										}
									],
									"id": "895233dc-9841-43b4-b178-24434ac3b81d"
								}
							],
							"id": "6690cc2e-1cc0-4557-ae8a-34edec5a70eb"
						}
					],
					"id": "f956e984-0760-47ba-b76e-17995681cc95"
				}
			],
			"id": "bd0c5fdb-ab63-4eb9-951e-0dd2c7c18439"
		},
		{
			"name": "Get Installer by MS",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "installers getbyms",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b55b5071-833a-40a5-829c-d6c63647f8b2",
														"exec": [
															"// Parse response JSON",
															"const jsonData = pm.response.json();",
															"",
															"// Validate HTTP status code",
															"pm.test(\"Validate HTTP status code\", () => pm.response.to.have.status(200));",
															"",
															"// Validate responsecode",
															"pm.test(\"Validate responsecode is 200\", () => pm.expect(jsonData.responsecode).to.eql(200));",
															"",
															"// Validate responsStatus",
															"pm.test(\"Validate responsStatus is true\", () => pm.expect(jsonData.responsStatus).to.eql(true));",
															"",
															"// Validate data is an array",
															"pm.test(\"Validate data is an array\", () => pm.expect(jsonData.data).to.be.an(\"array\"));",
															"",
															"// Validate pagination fields",
															"pm.test(\"Validate totalpage is a number\", () => pm.expect(jsonData.totalpage).to.be.a(\"number\"));",
															"pm.test(\"Validate currentpage is a number\", () => pm.expect(jsonData.currentpage).to.be.a(\"number\"));",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "2e7c3fd0-fe66-4861-a810-9eb2cb2ef8b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/installers/getbyms/:data/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"installers",
														"getbyms",
														":data",
														":offset",
														":limit"
													],
													"variable": [
														{
															"key": "data",
															"value": "Mita",
															"description": "(Required) "
														},
														{
															"key": "offset",
															"value": "1",
															"description": "(Required) "
														},
														{
															"key": "limit",
															"value": "100",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "f94d8850-3915-4207-991b-554d8dc325aa",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/installers/getbyms/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"installers",
																"getbyms",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 9487,\n  \"responsecode\": 9245,\n  \"data\": [\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 3983,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"s\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"stri\",\n      \"jobcount\": 7917,\n      \"jobdone\": 1297,\n      \"installer_status\": false,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"2004-04-07T08:28:54.214Z\"\n    },\n    {\n      \"disco\": \"string\",\n      \"firstname\": \"string\",\n      \"installer_number\": \"string\",\n      \"lastname\": \"string\",\n      \"lga\": \"string\",\n      \"profile_type\": \"string\",\n      \"vendor\": \"string\",\n      \"id\": 1896,\n      \"middlename\": \"string\",\n      \"year_experi\": \"string\",\n      \"install_class\": \"string\",\n      \"state\": \"string\",\n      \"company\": \"string\",\n      \"emailaddress\": \"string\",\n      \"country\": \"string\",\n      \"phone_number\": \"string\",\n      \"liicen_number\": \"string\",\n      \"jobcount\": 6157,\n      \"jobdone\": 2930,\n      \"installer_status\": true,\n      \"declined_reason\": \"string\",\n      \"address\": \"string\",\n      \"zipcode\": \"string\",\n      \"bvn\": \"string\",\n      \"roles\": \"string\",\n      \"passcode\": \"string\",\n      \"endate\": \"1960-12-26T14:22:27.618Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 9372,\n  \"currentpage\": 2417\n}"
												}
											]
										}
									],
									"id": "34869750-f7a5-4348-b188-daa45a57294b"
								}
							],
							"id": "1e888586-0913-4d63-bcb4-a27a209db5e1"
						}
					],
					"id": "747b2286-ef96-489d-9094-ecd6334b5e2f",
					"description": "Meter Supplier"
				}
			],
			"id": "cd26975f-636e-45bc-8024-41fb35587e6d"
		},
		{
			"name": "Activate Account",
			"item": [
				{
					"name": "Metersupplier activate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dd260a0-e116-447f-bfe8-f898eda006ed",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate top-level keys",
									"pm.test(\"Response contains all required keys\", () => {",
									"    pm.expect(jsonData).to.have.keys([",
									"        \"cc\",",
									"        \"responsecode\",",
									"        \"data\",",
									"        \"responsemessage\",",
									"        \"patterns\",",
									"        \"responsStatus\",",
									"        \"totalpage\",",
									"        \"currentpage\"",
									"    ]);",
									"});",
									"",
									"// Validate responsecode is numeric",
									"pm.test(\"responsecode is a number\", () => {",
									"    pm.expect(jsonData.responsecode).to.be.a(\"number\");",
									"});",
									"",
									"// Validate responsemessage type",
									"pm.test(\"responsemessage is a string\", () => {",
									"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
									"});",
									"",
									"// Validate data type (null, object, array, or string)",
									"pm.test(\"data is valid type (null | object | array | string)\", () => {",
									"    pm.expect(",
									"        jsonData.data === null ||",
									"        typeof jsonData.data === \"string\" ||",
									"        Array.isArray(jsonData.data) ||",
									"        typeof jsonData.data === \"object\"",
									"    ).to.eql(true);",
									"});",
									"",
									"// Validate responsStatus matches responsecode",
									"pm.test(\"responsStatus is consistent with responsecode\", () => {",
									"    pm.expect(jsonData.responsStatus).to.eql(jsonData.responsecode === 200);",
									"});",
									"",
									"// Validate pagination values",
									"pm.test(\"Pagination fields are numbers\", () => {",
									"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
									"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8a58efc6-088d-44e9-84fe-0289272171cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"string\",\n  \"role\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"vendor_id\": \"string\",\n  \"accountstatus\": false\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/Metersupplier/activate"
					},
					"response": [
						{
							"id": "6bf95544-1950-4808-b66a-50cee43def90",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"string\",\n  \"role\": \"string\",\n  \"firstname\": \"string\",\n  \"lastname\": \"string\",\n  \"vendor_id\": \"string\",\n  \"accountstatus\": false\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/activate"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "e8dac2ff-8670-425a-a516-83a8a22fae10"
		},
		{
			"name": "Cancel Meter Transfer",
			"item": [
				{
					"name": "Metersupplier canceltransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b819cad-e3c4-4b9e-8ffb-e14bdd4191dc",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate top-level keys",
									"pm.test(\"Response contains all required keys\", () => {",
									"    pm.expect(jsonData).to.have.keys([",
									"        \"cc\",",
									"        \"responsecode\",",
									"        \"data\",",
									"        \"responsemessage\",",
									"        \"patterns\",",
									"        \"responsStatus\",",
									"        \"totalpage\",",
									"        \"currentpage\"",
									"    ]);",
									"});",
									"",
									"// Validate responsecode is numeric",
									"pm.test(\"responsecode is a number\", () => {",
									"    pm.expect(jsonData.responsecode).to.be.a(\"number\");",
									"});",
									"",
									"// Validate responsemessage type",
									"pm.test(\"responsemessage is a string\", () => {",
									"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
									"});",
									"",
									"// Validate data is null, object, array, or string",
									"pm.test(\"data is valid type (null | object | array | string)\", () => {",
									"    pm.expect(",
									"        jsonData.data === null ||",
									"        typeof jsonData.data === \"string\" ||",
									"        Array.isArray(jsonData.data) ||",
									"        typeof jsonData.data === \"object\"",
									"    ).to.eql(true);",
									"});",
									"",
									"// Validate responsStatus consistency",
									"pm.test(\"responsStatus matches responsecode\", () => {",
									"    if (jsonData.responsecode === 200) {",
									"        pm.expect(jsonData.responsStatus).to.eql(true);",
									"    } else {",
									"        pm.expect(jsonData.responsStatus).to.eql(false);",
									"    }",
									"});",
									"",
									"// Validate pagination values",
									"pm.test(\"Pagination fields are numbers\", () => {",
									"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
									"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "41a5a96b-202c-4322-8fd7-06e95d174f2c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"st\"\n  },\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"string\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/Metersupplier/canceltransfer"
					},
					"response": [
						{
							"id": "2b65343a-79c3-4a64-8e8d-65b0a2a56be4",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"st\"\n  },\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"string\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/canceltransfer"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "349f8c26-731c-4009-bdf2-fd242c7b4f8d"
		},
		{
			"name": "Transfer Meters",
			"item": [
				{
					"name": "Metersupplier transfermeter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "595865a4-557f-4904-9f53-de2f4ee86d04",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate top-level keys",
									"pm.test(\"Response has expected keys\", () => {",
									"    pm.expect(jsonData).to.have.keys([",
									"        \"cc\",",
									"        \"responsecode\",",
									"        \"data\",",
									"        \"responsemessage\",",
									"        \"patterns\",",
									"        \"responsStatus\",",
									"        \"totalpage\",",
									"        \"currentpage\"",
									"    ]);",
									"});",
									"",
									"// Validate responsecode",
									"pm.test(\"responsecode is a number\", () => {",
									"    pm.expect(jsonData.responsecode).to.be.a(\"number\");",
									"});",
									"",
									"// Validate responsemessage",
									"pm.test(\"responsemessage is a string\", () => {",
									"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
									"});",
									"",
									"// Validate data can be string, object, or array",
									"pm.test(\"data is valid type\", () => {",
									"    pm.expect(",
									"        typeof jsonData.data === \"string\" ||",
									"        Array.isArray(jsonData.data) ||",
									"        typeof jsonData.data === \"object\"",
									"    ).to.eql(true);",
									"});",
									"",
									"// Validate responsStatus matches responsecode",
									"pm.test(\"responsStatus aligns with responsecode\", () => {",
									"    if (jsonData.responsecode === 200) {",
									"        pm.expect(jsonData.responsStatus).to.eql(true);",
									"    } else {",
									"        pm.expect(jsonData.responsStatus).to.eql(false);",
									"    }",
									"});",
									"",
									"// Validate pagination values are numbers",
									"pm.test(\"pagination values are numbers\", () => {",
									"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
									"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e2dd3f12-c401-49ad-9644-ec04667fae17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"st\"\n  },\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"string\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/Metersupplier/transfermeter"
					},
					"response": [
						{
							"id": "5c739fbf-aec9-46d4-9710-0048d2498cac",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"st\"\n  },\n  {\n    \"meternumber\": \"string\",\n    \"vendorid\": \"string\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/transfermeter"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "bf9c8497-ec5c-4202-9611-b9fe386d0491"
		},
		{
			"name": "Upload Meters by CSV",
			"item": [
				{
					"name": "uploadmeterraw",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fdd70df-a223-44c5-b504-34d954c43d50",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate root-level keys",
									"pm.test(\"Root object has expected keys\", () => {",
									"    pm.expect(jsonData).to.have.property(\"success\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData).to.have.property(\"results\");",
									"});",
									"",
									"// Validate success is boolean",
									"pm.test(\"success is boolean\", () => {",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"});",
									"",
									"// Validate message exists",
									"pm.test(\"message is a string\", () => {",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});",
									"",
									"// Validate results is an array",
									"pm.test(\"results is an array\", () => {",
									"    pm.expect(jsonData.results).to.be.an(\"array\");",
									"});",
									"",
									"// If results has items, validate the first one",
									"if (jsonData.results.length > 0) {",
									"    const result = jsonData.results[0];",
									"",
									"    pm.test(\"Result object has expected keys\", () => {",
									"        pm.expect(result).to.have.keys([",
									"            \"cc\",",
									"            \"responsecode\",",
									"            \"data\",",
									"            \"responsemessage\",",
									"            \"patterns\",",
									"            \"responsStatus\",",
									"            \"totalpage\",",
									"            \"currentpage\"",
									"        ]);",
									"    });",
									"",
									"    pm.test(\"responsecode is valid\", () => {",
									"        pm.expect(result.responsecode).to.be.oneOf([200, 301]);",
									"    });",
									"",
									"    pm.test(\"responsStatus aligns with responsecode\", () => {",
									"        if (result.responsecode === 200) {",
									"            pm.expect(result.responsStatus).to.eql(true);",
									"        } else {",
									"            pm.expect(result.responsStatus).to.eql(false);",
									"        }",
									"    });",
									"",
									"    pm.test(\"pagination values are numbers\", () => {",
									"        pm.expect(result.totalpage).to.be.a(\"number\");",
									"        pm.expect(result.currentpage).to.be.a(\"number\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f7667eaa-834e-4646-8074-1f3d2544af85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "ok",
									"type": "file",
									"uuid": "434fa81e-b9c9-4c2c-9ab5-2784bd647d3a",
									"src": "postman-cloud:///1f07b96a-f702-4ac0-8fd8-0450748122c5"
								},
								{
									"key": "contractid",
									"value": "1246152712",
									"type": "text",
									"uuid": "da0913f4-4935-40cb-822d-4de0295b230a"
								},
								{
									"key": "disco",
									"value": "Abuja Electricity Distribution Company",
									"type": "text",
									"uuid": "7eb60805-56ca-46ce-b712-c7f6aa344856"
								},
								{
									"key": "vendorid",
									"value": "Mojec",
									"type": "text",
									"uuid": "b3a1f84d-410e-4b4f-91bf-e5532e818d0e"
								},
								{
									"key": "vendorname",
									"value": "Mojec International",
									"type": "text",
									"uuid": "0a62cb3a-372f-4219-ab65-7fe22787026e"
								},
								{
									"key": "prop_scheme",
									"value": "PMI",
									"type": "text",
									"uuid": "768392a6-0f2f-4725-bfbe-6ab5b5272b72"
								},
								{
									"key": "file",
									"type": "file",
									"uuid": "e6ae31a4-cf46-44ff-8262-62a7df19ff78",
									"src": "/Users/mac/Downloads/upload_meters_template - upload_meters_template.csv (4).csv"
								}
							]
						},
						"url": "{{baseUrl}}/api/Metersupplier/uploadmeterraw"
					},
					"response": [
						{
							"id": "1e0088a8-03f5-4eaf-8e90-c18caf7fcb59",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "file",
									"file": {},
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/uploadmeterraw"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "7d7976a9-a829-4778-9623-cafb55bbf8d1"
		},
		{
			"name": "Upload Meters",
			"item": [
				{
					"name": "uploadmeters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd594be6-fecc-4fdc-81bf-ab4e87fd94dd",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate HTTP status code",
									"pm.test(\"Status code is valid\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 301]);",
									"});",
									"",
									"// Validate responsecode",
									"pm.test(\"responsecode is valid (200 or 301)\", () => {",
									"    pm.expect(jsonData.responsecode).to.be.oneOf([200, 301]);",
									"});",
									"",
									"// Validate responsStatus matches responsecode",
									"pm.test(\"responsStatus aligns with responsecode\", () => {",
									"    if (jsonData.responsecode === 200) {",
									"        pm.expect(jsonData.responsStatus).to.eql(true);",
									"    } else {",
									"        pm.expect(jsonData.responsStatus).to.eql(false);",
									"    }",
									"});",
									"",
									"// Validate responsemessage exists",
									"pm.test(\"responsemessage is present\", () => {",
									"    pm.expect(jsonData).to.have.property(\"responsemessage\");",
									"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
									"});",
									"",
									"// Validate data is null for these responses",
									"pm.test(\"data is null\", () => {",
									"    pm.expect(jsonData.data).to.eql(null);",
									"});",
									"",
									"// Validate pagination values",
									"pm.test(\"totalpage is a number\", () => {",
									"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
									"});",
									"pm.test(\"currentpage is a number\", () => {",
									"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c816ef1f-883d-4863-81eb-b21f8f792df3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"stri\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 5097,\n    \"date_supplied\": \"1999-02-04T20:14:41.981Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": false,\n    \"datecertified\": \"2007-01-20T23:37:45.904Z\",\n    \"date_purchase\": \"2020-10-03T20:18:27.365Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 7358.235224860592,\n    \"sealnumber\": \"string\",\n    \"comment\": \"str\",\n    \"status\": \"string\",\n    \"approvedate\": \"1959-01-24T16:08:55.089Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"1969-02-21T03:01:48.500Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"1970-03-15T07:22:59.358Z\",\n    \"expected_date\": \"2020-05-01T04:49:23.886Z\"\n  },\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"string\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 6196,\n    \"date_supplied\": \"1961-07-09T00:36:05.357Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": true,\n    \"datecertified\": \"1963-09-09T02:39:57.375Z\",\n    \"date_purchase\": \"1986-01-21T17:21:50.089Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 834.9451579585954,\n    \"sealnumber\": \"string\",\n    \"comment\": \"string\",\n    \"status\": \"string\",\n    \"approvedate\": \"1946-07-28T20:40:13.009Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"2014-09-11T21:38:20.520Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"2007-04-30T19:26:53.835Z\",\n    \"expected_date\": \"1947-02-07T03:29:42.722Z\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/Metersupplier/uploadmeters"
					},
					"response": [
						{
							"id": "d05940e6-ef08-4c2c-a751-356f877698c8",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"stri\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 5097,\n    \"date_supplied\": \"1999-02-04T20:14:41.981Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": false,\n    \"datecertified\": \"2007-01-20T23:37:45.904Z\",\n    \"date_purchase\": \"2020-10-03T20:18:27.365Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 7358.235224860592,\n    \"sealnumber\": \"string\",\n    \"comment\": \"str\",\n    \"status\": \"string\",\n    \"approvedate\": \"1959-01-24T16:08:55.089Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"1969-02-21T03:01:48.500Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"1970-03-15T07:22:59.358Z\",\n    \"expected_date\": \"2020-05-01T04:49:23.886Z\"\n  },\n  {\n    \"carton_number\": \"string\",\n    \"disco\": \"string\",\n    \"meter_brand\": \"string\",\n    \"meter_number\": \"string\",\n    \"meter_phase\": \"string\",\n    \"meter_type\": \"string\",\n    \"vendor_id\": \"string\",\n    \"id\": 6196,\n    \"date_supplied\": \"1961-07-09T00:36:05.357Z\",\n    \"batch_number\": \"string\",\n    \"vendorname\": \"string\",\n    \"prop_scheme\": \"string\",\n    \"discorejectreason\": \"string\",\n    \"certified\": true,\n    \"datecertified\": \"1963-09-09T02:39:57.375Z\",\n    \"date_purchase\": \"1986-01-21T17:21:50.089Z\",\n    \"contract_id\": \"string\",\n    \"metercost\": 834.9451579585954,\n    \"sealnumber\": \"string\",\n    \"comment\": \"string\",\n    \"status\": \"string\",\n    \"approvedate\": \"1946-07-28T20:40:13.009Z\",\n    \"mstransfer\": false,\n    \"msdate\": \"2014-09-11T21:38:20.520Z\",\n    \"acceptdisco\": false,\n    \"discodate\": \"2007-04-30T19:26:53.835Z\",\n    \"expected_date\": \"1947-02-07T03:29:42.722Z\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/uploadmeters"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "03dcb357-8f38-40ee-abaf-a773524f58ff"
		},
		{
			"name": "Submit document",
			"item": [
				{
					"name": "submitdocument",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a004b5bb-92ec-43b6-8055-dc6aabef3bf1",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate HTTP status code",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate responsecode",
									"pm.test(\"responsecode is 200\", () => {",
									"    pm.expect(jsonData.responsecode).to.eql(200);",
									"});",
									"",
									"// Validate responsStatus",
									"pm.test(\"responsStatus is true\", () => {",
									"    pm.expect(jsonData.responsStatus).to.eql(true);",
									"});",
									"",
									"// Validate data is null",
									"pm.test(\"data is null\", () => {",
									"    pm.expect(jsonData.data).to.eql(null);",
									"});",
									"",
									"// Validate responsemessage",
									"pm.test(\"responsemessage contains message uploaded\", () => {",
									"    pm.expect(jsonData.responsemessage).to.contain(\"updated\");",
									"});",
									"",
									"// Validate pagination values",
									"pm.test(\"totalpage is a number\", () => {",
									"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
									"});",
									"pm.test(\"currentpage is a number\", () => {",
									"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "63dacf7a-5a42-40aa-9bfe-4f08d8caa626",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"docfile\": \"string\",\n  \"docname\": \"string\",\n  \"doctype\": \"string\",\n  \"owner_id\": \"string\",\n  \"ownertype\": \"string\",\n  \"id\": 1243,\n  \"endate\": \"1988-03-29T05:13:47.706Z\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/Metersupplier/submitdocument"
					},
					"response": [
						{
							"id": "052414f0-e8fd-4b3e-8d8a-189945865e87",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"docfile\": \"string\",\n  \"docname\": \"string\",\n  \"doctype\": \"string\",\n  \"owner_id\": \"string\",\n  \"ownertype\": \"string\",\n  \"id\": 1243,\n  \"endate\": \"1988-03-29T05:13:47.706Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/submitdocument"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "aa786eb6-8004-4e6f-824c-d0fcf11ab3d3"
		},
		{
			"name": "Get Meter cost",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{offset}",
							"item": [
								{
									"name": "{limit}",
									"item": [
										{
											"name": "/api/Metersupplier/metercost/:data/:offset/:limit",
											"id": "3d5f4a30-38b1-440c-bd8b-587e28416ee9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Metersupplier/metercost/:data/:offset/:limit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Metersupplier",
														"metercost",
														":data",
														":offset",
														":limit"
													],
													"variable": [
														{
															"id": "4db549bb-15b2-426c-bc45-362d505af923",
															"key": "data",
															"value": "string",
															"description": "(Required) "
														},
														{
															"id": "fbd81471-e579-4db6-be08-37671a93b052",
															"key": "offset",
															"value": "147",
															"description": "(Required) "
														},
														{
															"id": "123d12d2-6709-4631-8cbc-edbe4ce77fd0",
															"key": "limit",
															"value": "147",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"id": "2ff2e052-44c3-49e3-88b9-3f3b175c2330",
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "text/plain"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/Metersupplier/metercost/:data/:offset/:limit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"Metersupplier",
																"metercost",
																":data",
																":offset",
																":limit"
															],
															"variable": [
																{
																	"key": "data"
																},
																{
																	"key": "offset"
																},
																{
																	"key": "limit"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n  \"cc\": 3814,\n  \"responsecode\": 7317,\n  \"data\": [\n    {\n      \"id\": 6651,\n      \"batch\": \"string\",\n      \"meterphase\": \"string\",\n      \"vendor_id\": \"string\",\n      \"amount\": 523.9461128198186,\n      \"endate\": \"2002-01-03T19:41:06.600Z\"\n    },\n    {\n      \"id\": 6665,\n      \"batch\": \"string\",\n      \"meterphase\": \"string\",\n      \"vendor_id\": \"string\",\n      \"amount\": 250.79872729311003,\n      \"endate\": \"2007-08-22T08:25:17.252Z\"\n    }\n  ],\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 3259,\n  \"currentpage\": 9501\n}"
												}
											]
										}
									],
									"id": "9e30a9d6-ca28-4d5d-b86d-03f8aa9a4c71"
								}
							],
							"id": "f075a405-953f-40c9-b27c-33b182d3e423"
						}
					],
					"id": "3b6afddf-a848-4fa5-b44c-9df3979119e2",
					"description": "vendor id"
				},
				{
					"name": "metercost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "819c21c2-05b2-421f-90b5-18e7a856fa09",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate HTTP status code",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate responsecode",
									"pm.test(\"responsecode is 200\", () => {",
									"    pm.expect(jsonData.responsecode).to.eql(200);",
									"});",
									"",
									"// Validate responsStatus",
									"pm.test(\"responsStatus is true\", () => {",
									"    pm.expect(jsonData.responsStatus).to.eql(true);",
									"});",
									"",
									"// Validate data is null",
									"pm.test(\"data is null\", () => {",
									"    pm.expect(jsonData.data).to.eql(null);",
									"});",
									"",
									"// Validate responsemessage is  string",
									"pm.test(\"responsemessage is a string\", () => {",
									"    pm.expect(jsonData.responsemessage).to.be.a(\"string\");",
									"});",
									"",
									"// Validate pagination values are numbers",
									"pm.test(\"totalpage is a number\", () => {",
									"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
									"});",
									"pm.test(\"currentpage is a number\", () => {",
									"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "be74b860-c485-4afe-ac14-e0ab734181a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 4582,\n  \"batch\": \"string\",\n  \"meterphase\": \"string\",\n  \"vendor_id\": \"stri\",\n  \"amount\": 6372.109846065507,\n  \"endate\": \"1963-09-17T11:41:36.141Z\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/Metersupplier/metercost"
					},
					"response": [
						{
							"id": "27990dd4-adea-40c5-bf79-be3b7ee9344b",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 4582,\n  \"batch\": \"string\",\n  \"meterphase\": \"string\",\n  \"vendor_id\": \"stri\",\n  \"amount\": 6372.109846065507,\n  \"endate\": \"1963-09-17T11:41:36.141Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/Metersupplier/metercost"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "56ee92bd-f7a9-43ff-90b1-2b7911dc829a"
		},
		{
			"name": "Verify User",
			"item": [
				{
					"name": "{data}",
					"item": [
						{
							"name": "{code}",
							"item": [
								{
									"name": "verifyaccountcode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd5a9f1e-d0ab-4c4b-ad0c-764044fd2413",
												"exec": [
													"// Parse response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Validate HTTP status code",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Validate responsecode",
													"pm.test(\"responsecode is 200\", () => {",
													"    pm.expect(jsonData.responsecode).to.eql(200);",
													"});",
													"",
													"// Validate responsStatus",
													"pm.test(\"responsStatus is true\", () => {",
													"    pm.expect(jsonData.responsStatus).to.eql(true);",
													"});",
													"",
													"// Validate data is null",
													"pm.test(\"data is null\", () => {",
													"    pm.expect(jsonData.data).to.eql(null);",
													"});",
													"",
													"// Validate responsemessage is empty string",
													"pm.test(\"responsemessage is empty string\", () => {",
													"    pm.expect(jsonData.responsemessage).to.eql(\"\");",
													"});",
													"",
													"// Validate cc equals 0",
													"pm.test(\"cc is 0\", () => {",
													"    pm.expect(jsonData.cc).to.eql(0);",
													"});",
													"",
													"// Validate pagination values are numbers",
													"pm.test(\"totalpage is a number\", () => {",
													"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
													"});",
													"pm.test(\"currentpage is a number\", () => {",
													"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "166552c7-e353-4c91-b4a7-43bff71a1ea6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/authentication/verifyaccountcode/:data/:code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"authentication",
												"verifyaccountcode",
												":data",
												":code"
											],
											"variable": [
												{
													"key": "data",
													"value": "Mita",
													"description": "(Required) "
												},
												{
													"key": "code",
													"value": "12378",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"id": "f3d57964-5acf-432d-b3d3-e5529a9a16c6",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "text/plain"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/authentication/verifyaccountcode/:data/:code",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"authentication",
														"verifyaccountcode",
														":data",
														":code"
													],
													"variable": [
														{
															"key": "data"
														},
														{
															"key": "code"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
										}
									]
								}
							],
							"id": "f15636c6-fe59-4c86-8433-954d7cbdc4f9"
						}
					],
					"id": "def7878b-4c0b-483c-830b-0503ae4fc7c5"
				}
			],
			"id": "271c9fd5-e9e2-4ef2-a20a-27503130bc65"
		},
		{
			"name": "Transfer meter by batch",
			"item": [
				{
					"name": "transferbatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "304678a4-774f-4da9-b80b-c7abdc7aea97",
								"exec": [
									"// Parse response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Validate HTTP status code",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate responsecode",
									"pm.test(\"responsecode is 200\", () => {",
									"    pm.expect(jsonData.responsecode).to.eql(200);",
									"});",
									"",
									"// Validate responsStatus",
									"pm.test(\"responsStatus is true\", () => {",
									"    pm.expect(jsonData.responsStatus).to.eql(true);",
									"});",
									"",
									"// Validate data is null",
									"pm.test(\"data is null\", () => {",
									"    pm.expect(jsonData.data).to.eql(null);",
									"});",
									"",
									"// Validate responsemessage is empty string",
									"pm.test(\"responsemessage is empty string\", () => {",
									"    pm.expect(jsonData.responsemessage).to.contain(\"Accepted\");",
									"});",
									"",
									"// Validate pagination values are numbers",
									"pm.test(\"totalpage is a number\", () => {",
									"    pm.expect(jsonData.totalpage).to.be.a(\"number\");",
									"});",
									"pm.test(\"currentpage is a number\", () => {",
									"    pm.expect(jsonData.currentpage).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a31a604c-d49f-4829-bf67-8dc8c8840c51",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batch\": \"string\",\n  \"vendor\": \"string\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/customers/transferbatch"
					},
					"response": [
						{
							"id": "744ad5c3-1d16-4509-bf52-0709e605e3b2",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"batch\": \"string\",\n  \"vendor\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/customers/transferbatch"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"cc\": 2222,\n  \"responsecode\": 2883,\n  \"data\": {\n    \"nullable\": true\n  },\n  \"responsemessage\": \"string\",\n  \"patterns\": \"string\",\n  \"responsStatus\": false,\n  \"totalpage\": 1761,\n  \"currentpage\": 2297\n}"
						}
					]
				}
			],
			"id": "2237d61c-04b7-4cdc-b4fd-5406f4cd092d"
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "logout",
					"id": "1f996d2a-9086-45d5-b14d-fe6df358cff4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/authentication/logout"
					},
					"response": [
						{
							"id": "dfa7a2d8-4164-471b-93bb-65b503d41767",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/authentication/logout"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "a709f448-7c19-4a25-a47a-51afa8248977"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{ms-token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e1dae993-d1d9-4be5-b457-9a7309a8be81",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "558cbd79-20e0-4e92-b805-b78b80d9feb4",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ms-token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://appmodule.delightfulgrass-0dcdf3e6.brazilsouth.azurecontainerapps.io",
			"type": "string"
		}
	]
}
